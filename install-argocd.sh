#!/bin/bash

echo "üî± ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ArgoCD ‡∏ö‡∏ô Kubernetes"
echo "====================================="

# Check if kubectl is available and cluster is running
echo "üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Kubernetes cluster..."
if ! kubectl cluster-info &> /dev/null; then
    echo "‚ùå Kubernetes cluster ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
    echo "üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô ./start-services.sh ‡∏Å‡πà‡∏≠‡∏ô"
    exit 1
fi

echo "‚úÖ Kubernetes cluster ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
echo "   Context: $(kubectl config current-context)"
echo "   Cluster: $(kubectl cluster-info | head -1 | grep -o 'https://[^[:space:]]*')"

# Create ArgoCD namespace
echo ""
echo "üì¶ ‡∏™‡∏£‡πâ‡∏≤‡∏á namespace ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ArgoCD..."
if kubectl get namespace argocd &> /dev/null; then
    echo "‚ö†Ô∏è  namespace 'argocd' ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"
else
    kubectl create namespace argocd
    echo "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á namespace 'argocd' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
fi

# Install ArgoCD
echo ""
echo "üöÄ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ArgoCD..."
echo "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ArgoCD manifests..."

kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

if [ $? -eq 0 ]; then
    echo "‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ArgoCD manifests ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
else
    echo "‚ùå ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ArgoCD ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
    exit 1
fi

# Wait for ArgoCD to be ready
echo ""
echo "‚è≥ ‡∏£‡∏≠‡πÉ‡∏´‡πâ ArgoCD pods ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô..."
echo "   (‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ 2-3 ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î images)"

# Wait for deployment to be available
kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd

if [ $? -eq 0 ]; then
    echo "‚úÖ ArgoCD server ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!"
else
    echo "‚ö†Ô∏è  ArgoCD server ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞..."
fi

# Check ArgoCD status
echo ""
echo "üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ArgoCD pods:"
kubectl get pods -n argocd

# Get initial admin password
echo ""
echo "üîë ‡∏£‡∏±‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô admin ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô..."
ADMIN_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" 2>/dev/null | base64 -d)

if [ ! -z "$ADMIN_PASSWORD" ]; then
    echo "‚úÖ ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô admin: $ADMIN_PASSWORD"
else
    echo "‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô admin ‡πÑ‡∏î‡πâ (‡∏≠‡∏≤‡∏à‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°)"
    echo "üí° ‡∏•‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á:"
    echo "   kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d"
fi

# Setup port forwarding
echo ""
echo "üåê ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á ArgoCD UI..."
echo "üìã ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ArgoCD:"
echo ""
echo "1. ‡πÄ‡∏õ‡∏¥‡∏î port forwarding (‡πÉ‡∏ô terminal ‡πÉ‡∏´‡∏°‡πà):"
echo "   kubectl port-forward svc/argocd-server -n argocd 8080:443"
echo ""
echo "2. ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏õ‡∏ó‡∏µ‡πà: https://localhost:8080"
echo "   (‡∏≠‡∏≤‡∏à‡∏°‡∏µ certificate warning - ‡∏Ñ‡∏•‡∏¥‡∏Å 'Advanced' ‡πÅ‡∏•‡πâ‡∏ß 'Proceed')"
echo ""
echo "3. ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢:"
echo "   Username: admin"
if [ ! -z "$ADMIN_PASSWORD" ]; then
    echo "   Password: $ADMIN_PASSWORD"
else
    echo "   Password: (‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô)"
fi
echo ""

# Ask if user wants to start port forwarding now
echo "üîÑ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏° port forwarding ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/N)"
read -r response
if [[ "$response" =~ ^[Yy]$ ]]; then
    echo "üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° port forwarding..."
    echo "üí° ‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î port forwarding"
    echo "üåê ArgoCD UI ‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏µ‡πà: https://localhost:8080"
    echo ""
    kubectl port-forward svc/argocd-server -n argocd 8080:443
else
    echo ""
    echo "üí° ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:"
    echo "   kubectl port-forward svc/argocd-server -n argocd 8080:443"
fi

echo ""
echo "====================================="
echo "üéâ ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ArgoCD ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!"
echo ""
echo "üìù ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á:"
echo "‚úÖ Namespace: argocd"
echo "‚úÖ ArgoCD Server: argocd-server"
echo "‚úÖ UI Access: https://localhost:8080 (‡πÄ‡∏°‡∏∑‡πà‡∏≠ port forwarding)"
echo "‚úÖ Username: admin"
if [ ! -z "$ADMIN_PASSWORD" ]; then
    echo "‚úÖ Password: $ADMIN_PASSWORD"
fi
echo ""
echo "üîó ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:"
echo "   - ArgoCD Documentation: https://argo-cd.readthedocs.io/"
echo "   - Getting Started: https://argo-cd.readthedocs.io/en/stable/getting_started/"
echo "====================================="
