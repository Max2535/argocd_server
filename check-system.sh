#!/bin/bash

echo "üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Kubernetes + ArgoCD"
echo "================================================"

# Check OS Version
echo "üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö:"
echo "OS: $(lsb_release -d | cut -f2)"
echo "Kernel: $(uname -r)"
echo "Architecture: $(uname -m)"

# Check Resources
echo ""
echo "üíæ ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏£‡∏∞‡∏ö‡∏ö:"
echo "RAM: $(free -h | awk 'NR==2{printf "%.1f/%.1f GB (%.2f%%)\n", $3/1024/1024,$2/1024/1024,$3*100/$2 }')"
echo "CPU: $(nproc) cores"
echo "Disk: $(df -h / | awk 'NR==2{print $4" available"}')"

# Check Network
echo ""
echo "üåê ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢:"
if ping -c 1 8.8.8.8 &> /dev/null; then
    echo "‚úÖ Internet connection: OK"
else
    echo "‚ùå Internet connection: Failed"
fi

# Check if running as root
echo ""
echo "üë§ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:"
if [[ $EUID -eq 0 ]]; then
    echo "‚ùå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ root user (‡πÑ‡∏°‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)"
    echo "   ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ user ‡∏ó‡∏µ‡πà‡∏°‡∏µ sudo privileges"
else
    echo "‚úÖ ‡∏£‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ user: $(whoami)"
    if sudo -n true 2>/dev/null; then
        echo "‚úÖ ‡∏°‡∏µ sudo privileges"
    else
        echo "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ sudo privileges"
    fi
fi

# Check Swap
echo ""
echo "üîÑ Swap:"
if [ $(swapon --show | wc -l) -eq 0 ]; then
    echo "‚úÖ Swap ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà"
else
    echo "‚ö†Ô∏è  Swap ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á)"
fi

# Check Firewall
echo ""
echo "üî• Firewall:"
if sudo ufw status | grep -q "Status: active"; then
    echo "‚ö†Ô∏è  UFW Firewall ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á)"
else
    echo "‚úÖ UFW Firewall ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà"
fi

# Check existing installations
echo ""
echo "üì¶ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö software ‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß:"

if command -v docker &> /dev/null; then
    echo "‚ö†Ô∏è  Docker ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß (‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏±‡∏î‡πÅ‡∏¢‡πâ‡∏á‡∏Å‡∏±‡∏ö containerd)"
    echo "   Version: $(docker --version)"
    echo "   ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏´‡∏¢‡∏∏‡∏î Docker: sudo systemctl stop docker && sudo systemctl disable docker"
fi

if command -v containerd &> /dev/null; then
    echo "‚úÖ Containerd ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß"
    echo "   Version: $(containerd --version)"
fi

if command -v kubectl &> /dev/null; then
    echo "‚úÖ kubectl ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß"
    echo "   Version: $(kubectl version --client --short 2>/dev/null)"
fi

if command -v kubeadm &> /dev/null; then
    echo "‚úÖ kubeadm ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß"
    echo "   Version: $(kubeadm version -o short)"
fi

# Check ports
echo ""
echo "üîå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ports ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô:"
REQUIRED_PORTS="6443 2379 2380 10250 10259 10257"
for port in $REQUIRED_PORTS; do
    if ss -tuln | grep -q ":$port "; then
        echo "‚ùå Port $port ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà"
    else
        echo "‚úÖ Port $port ‡∏ß‡πà‡∏≤‡∏á"
    fi
done

# Check minimum requirements
echo ""
echo "üìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥:"

# RAM check (minimum 2GB)
RAM_GB=$(free -m | awk 'NR==2{printf "%.1f", $2/1024}')
if (( $(echo "$RAM_GB >= 2" | bc -l) )); then
    echo "‚úÖ RAM: ${RAM_GB}GB (‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 2GB)"
else
    echo "‚ùå RAM: ${RAM_GB}GB (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2GB)"
fi

# CPU check (minimum 2 cores)
CPU_CORES=$(nproc)
if [ $CPU_CORES -ge 2 ]; then
    echo "‚úÖ CPU: ${CPU_CORES} cores (‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 2 cores)"
else
    echo "‚ùå CPU: ${CPU_CORES} cores (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 cores)"
fi

# Disk check (minimum 20GB available)
DISK_GB=$(df / | awk 'NR==2{printf "%.1f", $4/1024/1024}')
if (( $(echo "$DISK_GB >= 20" | bc -l) )); then
    echo "‚úÖ Disk: ${DISK_GB}GB available (‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 20GB)"
else
    echo "‚ùå Disk: ${DISK_GB}GB available (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 20GB)"
fi

echo ""
echo "================================================"
echo "üéØ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:"

# Count issues
ISSUES=0

if [[ $EUID -eq 0 ]]; then
    echo "‚ùå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ root user"
    ISSUES=$((ISSUES+1))
fi

if ! ping -c 1 8.8.8.8 &> /dev/null; then
    echo "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Internet ‡πÑ‡∏î‡πâ"
    ISSUES=$((ISSUES+1))
fi

if command -v docker &> /dev/null && systemctl is-active --quiet docker; then
    echo "‚ùå Docker ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà (‡∏Ñ‡∏ß‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á)"
    ISSUES=$((ISSUES+1))
fi

if (( $(echo "$RAM_GB < 2" | bc -l) )); then
    echo "‚ùå RAM ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠"
    ISSUES=$((ISSUES+1))
fi

if [ $CPU_CORES -lt 2 ]; then
    echo "‚ùå CPU cores ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠"
    ISSUES=$((ISSUES+1))
fi

if (( $(echo "$DISK_GB < 20" | bc -l) )); then
    echo "‚ùå Disk space ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠"
    ISSUES=$((ISSUES+1))
fi

if [ $ISSUES -eq 0 ]; then
    echo "‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Kubernetes + ArgoCD"
    echo ""
    echo "üöÄ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á:"
    echo "   chmod +x install_argocd.sh"
    echo "   ./install_argocd.sh master"
else
    echo "‚ö†Ô∏è  ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤ $ISSUES ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á"
fi

echo "================================================"
