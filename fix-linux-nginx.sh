#!/bin/bash

# =============================================================================
# ЁЯФз р╣Бр╕Бр╣Йр╣Др╕Вр╕Ыр╕▒р╕Нр╕лр╕▓ 502 Bad Gateway р╕кр╕│р╕лр╕гр╕▒р╕Ъ ArgoCD р╕Ър╕Щ Linux
# =============================================================================

# р╕кр╕╡р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Бр╕кр╕Фр╕Зр╕Ьр╕е
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() { echo -e "${GREEN}[INFO]${NC} $1"; }
warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; }
info() { echo -e "${BLUE}[INFO]${NC} $1"; }

echo "ЁЯФз р╣Бр╕Бр╣Йр╣Др╕Вр╕Ыр╕▒р╕Нр╕лр╕▓ 502 Bad Gateway - ArgoCD р╕Ър╕Щ Linux"
echo "=============================================="

# р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕бр╕╡ kubectl р╕лр╕гр╕╖р╕нр╣Др╕бр╣И
if ! command -v kubectl >/dev/null 2>&1; then
    error "kubectl р╣Др╕бр╣Ир╣Др╕Фр╣Йр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З р╕Бр╕гр╕╕р╕Ур╕▓р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕Зр╕Бр╣Ир╕нр╕Щр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ"
    exit 1
fi

# р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕бр╕╡ docker р╕лр╕гр╕╖р╕нр╣Др╕бр╣И
if ! command -v docker >/dev/null 2>&1; then
    error "docker р╣Др╕бр╣Ир╣Др╕Фр╣Йр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З р╕Бр╕гр╕╕р╕Ур╕▓р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕Зр╕Бр╣Ир╕нр╕Щр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ"
    exit 1
fi

# р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓ ArgoCD р╕Чр╕│р╕Зр╕▓р╕Щр╕нр╕вр╕╣р╣Ир╕лр╕гр╕╖р╕нр╣Др╕бр╣И
log "р╕Бр╕│р╕ер╕▒р╕Зр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕кр╕Цр╕▓р╕Щр╕░ ArgoCD..."
if ! kubectl get namespace argocd >/dev/null 2>&1; then
    error "р╣Др╕бр╣Ир╕Юр╕Ъ namespace argocd р╕Бр╕гр╕╕р╕Ур╕▓р╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З ArgoCD р╕Бр╣Ир╕нр╕Щ"
    exit 1
fi

# р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ pod р╕Вр╕нр╕З ArgoCD Server
if ! kubectl get pods -n argocd -l app.kubernetes.io/name=argocd-server 2>/dev/null | grep -q Running; then
    error "ArgoCD Server р╣Др╕бр╣Ир╣Др╕Фр╣Йр╕Чр╕│р╕Зр╕▓р╕Щ р╕Бр╕гр╕╕р╕Ур╕▓р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕кр╕Цр╕▓р╕Щр╕░ pod"
    echo "kubectl get pods -n argocd"
    exit 1
else
    log "тЬЕ ArgoCD Server р╕Бр╕│р╕ер╕▒р╕Зр╕Чр╕│р╕Зр╕▓р╕Щ"
fi

# 1. р╕кр╕гр╣Йр╕▓р╕Зр╣Др╕Фр╣Ар╕гр╕Бр╕Чр╕нр╕гр╕╡р╕кр╕│р╕лр╕гр╕▒р╕Ъ nginx config
log "1. р╕Бр╕│р╕ер╕▒р╕Зр╕кр╕гр╣Йр╕▓р╕Зр╣Др╕Фр╣Ар╕гр╕Бр╕Чр╕нр╕гр╕╡р╕кр╕│р╕лр╕гр╕▒р╕Ъ nginx config..."
mkdir -p nginx-simple

# 2. р╕кр╕гр╣Йр╕▓р╕Зр╣Др╕Яр╕ер╣М config р╕кр╕│р╕лр╕гр╕▒р╕Ъ nginx
log "2. р╕Бр╕│р╕ер╕▒р╕Зр╕кр╕гр╣Йр╕▓р╕Зр╣Др╕Яр╕ер╣М config р╕кр╕│р╕лр╕гр╕▒р╕Ъ nginx..."
cat > nginx-simple/nginx-linux.conf <<'EOF'
upstream argocd-server {
    # р╣Гр╕Кр╣Й localhost р╣Бр╕Чр╕Щ host.docker.internal р╕кр╕│р╕лр╕гр╕▒р╕Ъ Linux
    server localhost:8080;
}

server {
    listen 80;
    server_name localhost;

    # Health check endpoint
    location /nginx-status {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # ArgoCD UI р╣Бр╕ер╕░ API endpoints
    location / {
        proxy_pass http://argocd-server;
        
        # Headers р╕Ир╕│р╣Ар╕Ыр╣Зр╕Щр╕кр╕│р╕лр╕гр╕▒р╕Ъ proxy
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # р╕кр╕Щр╕▒р╕Ър╕кр╕Щр╕╕р╕Щ WebSocket р╕кр╕│р╕лр╕гр╕▒р╕Ъ terminal р╣Бр╕ер╕░ real-time updates
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # р╕Хр╕▒р╣Йр╕Зр╕Др╣Ир╕▓ timeout р╣Гр╕лр╣Йр╣Ар╕лр╕бр╕▓р╕░р╕Бр╕▒р╕Ър╕Бр╕▓р╕гр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ ArgoCD
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        
        # р╣Ар╕Юр╕┤р╣Ир╕б buffer sizes р╕кр╕│р╕лр╕гр╕▒р╕Ъ response р╕Вр╕Щр╕▓р╕Фр╣Гр╕лр╕Нр╣И
        proxy_buffer_size 8k;
        proxy_buffers 4 32k;
        proxy_busy_buffers_size 64k;
    }
}
EOF

# 3. р╕кр╕гр╣Йр╕▓р╕Зр╣Др╕Яр╕ер╣М docker-compose р╕кр╕│р╕лр╕гр╕▒р╕Ъ Linux
log "3. р╕Бр╕│р╕ер╕▒р╕Зр╕кр╕гр╣Йр╕▓р╕Зр╣Др╕Яр╕ер╣М docker-compose р╕кр╕│р╕лр╕гр╕▒р╕Ъ Linux..."
cat > docker-compose-linux-nginx.yml <<'EOF'
version: '3'

services:
  nginx-argocd:
    image: nginx:alpine
    container_name: nginx-argocd
    # р╣Гр╕Кр╣Й host network mode р╕кр╕│р╕лр╕гр╕▒р╕Ъ Linux р╣Ар╕Юр╕╖р╣Ир╕нр╣Гр╕лр╣Йр╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕З localhost р╣Др╕Фр╣Йр╣Вр╕Фр╕вр╕Хр╕гр╕З
    network_mode: "host"
    volumes:
      - ./nginx-simple/nginx-linux.conf:/etc/nginx/conf.d/default.conf:ro
    restart: unless-stopped
    # р╕Др╕│р╕кр╕▒р╣Ир╕Зр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓ nginx р╕Чр╕│р╕Зр╕▓р╕Щр╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕Зр╕лр╕гр╕╖р╕нр╣Др╕бр╣И
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/nginx-status"]
      interval: 10s
      timeout: 5s
      retries: 3
EOF

# 4. р╕вр╕Бр╣Ар╕ер╕┤р╕Б port forwarding р╣Ар╕Фр╕┤р╕б (р╕Цр╣Йр╕▓р╕бр╕╡)
log "4. р╕Бр╕│р╕ер╕▒р╕Зр╕вр╕Бр╣Ар╕ер╕┤р╕Б port forwarding р╣Ар╕Фр╕┤р╕б..."
pkill -f "kubectl.*port-forward.*argocd-server" 2>/dev/null || true
sleep 3

# 5. р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓ port 8080 р╕зр╣Ир╕▓р╕Зр╕лр╕гр╕╖р╕нр╣Др╕бр╣И
log "5. р╕Бр╕│р╕ер╕▒р╕Зр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓ port 8080 р╕зр╣Ир╕▓р╕Зр╕лр╕гр╕╖р╕нр╣Др╕бр╣И..."
if netstat -tuln | grep -q ":8080 "; then
    warn "тЪая╕П Port 8080 р╕бр╕╡р╕Бр╕▓р╕гр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щр╕нр╕вр╕╣р╣И"
    warn "р╕Бр╕│р╕ер╕▒р╕Зр╕Юр╕вр╕▓р╕вр╕▓р╕бр╕вр╕Бр╣Ар╕ер╕┤р╕Бр╕Бр╕▓р╕гр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ port 8080..."
    
    # р╕Юр╕вр╕▓р╕вр╕▓р╕бр╕лр╕▓ process р╕Чр╕╡р╣Ир╣Гр╕Кр╣Й port 8080
    pid=$(lsof -t -i:8080 2>/dev/null)
    if [ -n "$pid" ]; then
        warn "р╕Юр╕Ъ process ID: $pid р╕Бр╕│р╕ер╕▒р╕Зр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ port 8080"
        warn "р╕Бр╕│р╕ер╕▒р╕Зр╕Юр╕вр╕▓р╕вр╕▓р╕бр╕вр╕Бр╣Ар╕ер╕┤р╕Б process..."
        kill $pid 2>/dev/null || true
        sleep 2
    fi
fi

# 6. р╣Ар╕гр╕┤р╣Ир╕б port forwarding р╣Гр╕лр╕бр╣И
log "6. р╕Бр╕│р╕ер╕▒р╕Зр╣Ар╕гр╕┤р╣Ир╕б port forwarding..."
kubectl port-forward svc/argocd-server -n argocd 8080:443 --address 0.0.0.0 > /dev/null 2>&1 &
echo $! > .kubectl-proxy.pid
log "тЬЕ р╣Ар╕гр╕┤р╣Ир╕б port forwarding р╕Ър╕Щ port 8080 р╣Бр╕ер╣Йр╕з (PID: $(cat .kubectl-proxy.pid))"
sleep 5

# 7. р╕вр╕Бр╣Ар╕ер╕┤р╕Б nginx container р╣Ар╕Фр╕┤р╕б (р╕Цр╣Йр╕▓р╕бр╕╡)
log "7. р╕Бр╕│р╕ер╕▒р╕Зр╕вр╕Бр╣Ар╕ер╕┤р╕Б nginx container р╣Ар╕Фр╕┤р╕б..."
docker stop nginx-argocd >/dev/null 2>&1 || true
docker rm nginx-argocd >/dev/null 2>&1 || true

# 8. р╣Ар╕гр╕┤р╣Ир╕б nginx container р╣Гр╕лр╕бр╣И
log "8. р╕Бр╕│р╕ер╕▒р╕Зр╣Ар╕гр╕┤р╣Ир╕б nginx container р╣Гр╕лр╕бр╣И..."
if command -v docker-compose >/dev/null 2>&1; then
    docker-compose -f docker-compose-linux-nginx.yml down >/dev/null 2>&1 || true
    docker-compose -f docker-compose-linux-nginx.yml up -d
elif docker compose version >/dev/null 2>&1; then
    docker compose -f docker-compose-linux-nginx.yml down >/dev/null 2>&1 || true
    docker compose -f docker-compose-linux-nginx.yml up -d
else
    error "р╣Др╕бр╣Ир╕Юр╕Ър╕Др╕│р╕кр╕▒р╣Ир╕З docker-compose р╕лр╕гр╕╖р╕н docker compose"
    error "р╕Бр╕│р╕ер╕▒р╕Зр╣Гр╕Кр╣Йр╕Др╕│р╕кр╕▒р╣Ир╕З docker run р╣Бр╕Чр╕Щ..."
    
    docker run -d --name nginx-argocd \
        --network host \
        -v $(pwd)/nginx-simple/nginx-linux.conf:/etc/nginx/conf.d/default.conf:ro \
        --restart unless-stopped \
        nginx:alpine
fi

# 9. р╕гр╕нр╣Гр╕лр╣Й nginx р╣Ар╕гр╕┤р╣Ир╕бр╕Чр╕│р╕Зр╕▓р╕Щ
log "9. р╕Бр╕│р╕ер╕▒р╕Зр╕гр╕нр╣Гр╕лр╣Й nginx р╣Ар╕гр╕┤р╣Ир╕бр╕Чр╕│р╕Зр╕▓р╕Щ..."
sleep 5

# 10. р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓ nginx р╕Чр╕│р╕Зр╕▓р╕Щр╕лр╕гр╕╖р╕нр╣Др╕бр╣И
log "10. р╕Бр╕│р╕ер╕▒р╕Зр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓ nginx р╕Чр╕│р╕Зр╕▓р╕Щр╕лр╕гр╕╖р╕нр╣Др╕бр╣И..."
if curl -s http://localhost/nginx-status >/dev/null 2>&1; then
    log "тЬЕ Nginx р╕Чр╕│р╕Зр╕▓р╕Щр╕Ыр╕Бр╕Хр╕┤"
else
    error "тЭМ Nginx р╣Др╕бр╣Ир╕Чр╕│р╕Зр╕▓р╕Щ"
    error "р╕Бр╕гр╕╕р╕Ур╕▓р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ log р╕Фр╣Йр╕зр╕вр╕Др╕│р╕кр╕▒р╣Ир╕З: docker logs nginx-argocd"
fi

# 11. р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕З ArgoCD р╣Др╕Фр╣Йр╕лр╕гр╕╖р╕нр╣Др╕бр╣И
log "11. р╕Бр╕│р╕ер╕▒р╕Зр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕зр╣Ир╕▓р╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕З ArgoCD р╣Др╕Фр╣Йр╕лр╕гр╕╖р╕нр╣Др╕бр╣И..."
if curl -s http://localhost/ | grep -q "ArgoCD\|loading\|<!DOCTYPE html>"; then
    log "тЬЕ р╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕З ArgoCD р╣Др╕Фр╣Й"
    echo ""
    echo "ЁЯОЙ р╣Бр╕Бр╣Йр╣Др╕Вр╕Ыр╕▒р╕Нр╕лр╕▓р╕кр╕│р╣Ар╕гр╣Зр╕И!"
    echo "ЁЯМР р╣Ар╕Вр╣Йр╕▓р╣Гр╕Кр╣Й ArgoCD р╣Др╕Фр╣Йр╕Чр╕╡р╣И: http://$(hostname -I | awk '{print $1}')"
    echo "ЁЯСд Username: admin"
    
    # р╕Юр╕вр╕▓р╕вр╕▓р╕бр╕Фр╕╢р╕Зр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ
    password=$(kubectl -n argocd get secret argocd-initial-admin-password -o jsonpath="{.data.password}" 2>/dev/null | base64 -d)
    if [ -n "$password" ]; then
        echo "ЁЯФС Password: $password"
    else
        echo "ЁЯФС Password: р╕гр╕▒р╕Щ ./get-password.sh р╣Ар╕Юр╕╖р╣Ир╕нр╕Фр╕╣р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ"
    fi
else
    warn "тЪая╕П р╕вр╕▒р╕Зр╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕З ArgoCD р╣Др╕Фр╣Й"
    warn "р╕нр╕▓р╕Ир╕Хр╣Йр╕нр╕Зр╕гр╕нр╕кр╕▒р╕Бр╕Др╕гр╕╣р╣И р╕лр╕гр╕╖р╕нр╕ер╕нр╕Зр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Фр╣Йр╕зр╕вр╕Др╕│р╕кр╕▒р╣Ир╕З: curl -I http://localhost/"
fi

# 12. р╣Бр╕кр╕Фр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Хр╕┤р╕б
echo ""
echo "тД╣я╕П р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Хр╕┤р╕б:"
echo "   - Kubernetes Pods: kubectl get pods -n argocd"
echo "   - Port Forwarding: ps aux | grep port-forward"
echo "   - Nginx Container: docker ps | grep nginx-argocd"
echo "   - Nginx Logs: docker logs nginx-argocd"
echo "   - HTTP Status: curl -I http://localhost/"
echo ""
echo "тЬЕ р╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ!"
