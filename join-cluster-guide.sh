#!/bin/bash

# =============================================================================
# üîó Join Kubernetes Cluster - Client Setup Guide
# =============================================================================

echo "üîó ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£ Join Kubernetes Cluster Client"
echo "========================================"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

echo -e "\n${BLUE}üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó Cluster ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Join:${NC}"
echo "1Ô∏è‚É£  kind Cluster (Local Development)"
echo "2Ô∏è‚É£  kubeadm Cluster (Production)"
echo "3Ô∏è‚É£  Cloud Cluster (EKS, GKE, AKS)"
echo "4Ô∏è‚É£  Existing Cluster (‡∏°‡∏µ kubeconfig ‡πÅ‡∏•‡πâ‡∏ß)"
echo ""

read -p "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1-4): " cluster_type

case $cluster_type in
    1)
        echo -e "\n${CYAN}üê≥ kind Cluster - Local Development${NC}"
        echo "=================================="
        
        echo -e "\n1Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö kind clusters ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà:"
        echo "   kind get clusters"
        
        echo -e "\n2Ô∏è‚É£ ‡∏î‡∏π kubeconfig ‡∏Ç‡∏≠‡∏á cluster:"
        echo "   kind get kubeconfig --name=argocd-cluster"
        
        echo -e "\n3Ô∏è‚É£ Copy kubeconfig ‡πÑ‡∏õ‡∏¢‡∏±‡∏á client machine:"
        echo "   # ‡∏ö‡∏ô server (‡∏ó‡∏µ‡πà‡∏°‡∏µ kind cluster)"
        echo "   kind get kubeconfig --name=argocd-cluster > argocd-kubeconfig.yaml"
        echo ""
        echo "   # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç server IP ‡πÉ‡∏ô kubeconfig"
        echo "   sed -i 's/127.0.0.1/SERVER_IP_ADDRESS/g' argocd-kubeconfig.yaml"
        echo ""
        echo "   # Copy ‡πÑ‡∏õ‡∏¢‡∏±‡∏á client"
        echo "   scp argocd-kubeconfig.yaml user@client-machine:~/.kube/config"
        
        echo -e "\n4Ô∏è‚É£ ‡∏ö‡∏ô client machine:"
        echo "   # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á kubectl"
        echo "   curl -LO https://dl.k8s.io/release/\$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        echo "   sudo install kubectl /usr/local/bin/"
        echo ""
        echo "   # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"
        echo "   kubectl cluster-info"
        echo "   kubectl get nodes"
        
        echo -e "\n${YELLOW}‚ö†Ô∏è  ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:${NC}"
        echo "   - kind cluster ‡πÉ‡∏ä‡πâ Docker port mapping"
        echo "   - ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç IP address ‡πÉ‡∏ô kubeconfig"
        echo "   - ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö development ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"
        ;;
        
    2)
        echo -e "\n${CYAN}‚öôÔ∏è kubeadm Cluster - Production${NC}"
        echo "================================"
        
        echo -e "\n1Ô∏è‚É£ ‡∏ö‡∏ô Master Node - ‡∏™‡∏£‡πâ‡∏≤‡∏á join token:"
        echo "   # ‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡πÉ‡∏´‡∏°‡πà"
        echo "   kubeadm token create --print-join-command"
        echo ""
        echo "   # ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏π token ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà"
        echo "   kubeadm token list"
        echo ""
        echo "   # ‡∏î‡∏π CA cert hash"
        echo "   openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'"
        
        echo -e "\n2Ô∏è‚É£ ‡∏ö‡∏ô Worker Node - Join cluster:"
        echo "   # ‡∏£‡∏±‡∏ô command ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å master"
        echo "   sudo kubeadm join <MASTER_IP>:6443 \\"
        echo "     --token <TOKEN> \\"
        echo "     --discovery-token-ca-cert-hash sha256:<HASH>"
        
        echo -e "\n3Ô∏è‚É£ Setup kubectl ‡∏ö‡∏ô client machine:"
        echo "   # Copy admin kubeconfig ‡∏à‡∏≤‡∏Å master"
        echo "   scp root@master-node:/etc/kubernetes/admin.conf ~/.kube/config"
        echo ""
        echo "   # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ownership"
        echo "   sudo chown \$(id -u):\$(id -g) ~/.kube/config"
        echo ""
        echo "   # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö"
        echo "   kubectl get nodes"
        
        echo -e "\n${YELLOW}‚ö†Ô∏è  ‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î:${NC}"
        echo "   - Ports 6443, 2379-2380, 10250-10252 ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î"
        echo "   - CNI plugin ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß"
        echo "   - Container runtime ‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°"
        ;;
        
    3)
        echo -e "\n${CYAN}‚òÅÔ∏è Cloud Cluster (EKS, GKE, AKS)${NC}"
        echo "================================"
        
        echo -e "\n${BLUE}üåä AWS EKS:${NC}"
        echo "   # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á AWS CLI ‡πÅ‡∏•‡∏∞ eksctl"
        echo "   curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\""
        echo "   unzip awscliv2.zip && sudo ./aws/install"
        echo ""
        echo "   # Configure AWS credentials"
        echo "   aws configure"
        echo ""
        echo "   # Get kubeconfig"
        echo "   aws eks update-kubeconfig --region <region> --name <cluster-name>"
        
        echo -e "\n${BLUE}üåê Google GKE:${NC}"
        echo "   # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á gcloud CLI"
        echo "   curl https://sdk.cloud.google.com | bash"
        echo "   exec -l \$SHELL"
        echo ""
        echo "   # Login ‡πÅ‡∏•‡∏∞ set project"
        echo "   gcloud auth login"
        echo "   gcloud config set project <project-id>"
        echo ""
        echo "   # Get kubeconfig"
        echo "   gcloud container clusters get-credentials <cluster-name> --zone <zone>"
        
        echo -e "\n${BLUE}üî∑ Azure AKS:${NC}"
        echo "   # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Azure CLI"
        echo "   curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash"
        echo ""
        echo "   # Login"
        echo "   az login"
        echo ""
        echo "   # Get kubeconfig"
        echo "   az aks get-credentials --resource-group <rg-name> --name <cluster-name>"
        
        echo -e "\n4Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠:"
        echo "   kubectl cluster-info"
        echo "   kubectl get nodes"
        ;;
        
    4)
        echo -e "\n${CYAN}üìù Existing Cluster (‡∏°‡∏µ kubeconfig ‡πÅ‡∏•‡πâ‡∏ß)${NC}"
        echo "======================================="
        
        echo -e "\n1Ô∏è‚É£ Copy kubeconfig file:"
        echo "   # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: Copy ‡∏ó‡∏±‡πâ‡∏á‡πÑ‡∏ü‡∏•‡πå"
        echo "   cp /path/to/kubeconfig ~/.kube/config"
        echo ""
        echo "   # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: Merge ‡∏Å‡∏±‡∏ö config ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà"
        echo "   KUBECONFIG=~/.kube/config:/path/to/new-config kubectl config view --flatten > ~/.kube/merged-config"
        echo "   mv ~/.kube/merged-config ~/.kube/config"
        
        echo -e "\n2Ô∏è‚É£ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å context:"
        echo "   # ‡∏î‡∏π contexts ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà"
        echo "   kubectl config get-contexts"
        echo ""
        echo "   # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô context"
        echo "   kubectl config use-context <context-name>"
        
        echo -e "\n3Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠:"
        echo "   kubectl cluster-info"
        echo "   kubectl get nodes"
        echo "   kubectl get namespaces"
        
        echo -e "\n4Ô∏è‚É£ Access ArgoCD (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ):"
        echo "   # ‡∏î‡∏π ArgoCD service"
        echo "   kubectl get svc -n argocd"
        echo ""
        echo "   # Port forward"
        echo "   kubectl port-forward svc/argocd-server -n argocd 8080:443"
        echo ""
        echo "   # ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ LoadBalancer/Ingress ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ"
        ;;
        
    *)
        log_error "‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
        exit 1
        ;;
esac

echo -e "\n${GREEN}üîß ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏´‡∏•‡∏±‡∏á Join Cluster:${NC}"
echo "================================="

echo -e "\n1Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ cluster:"
echo "   kubectl cluster-info"
echo "   kubectl get nodes -o wide"
echo "   kubectl get namespaces"

echo -e "\n2Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö permissions:"
echo "   kubectl auth can-i get pods"
echo "   kubectl auth can-i create deployments"
echo "   kubectl auth can-i '*' '*' --all-namespaces"

echo -e "\n3Ô∏è‚É£ Setup namespace (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£):"
echo "   kubectl create namespace my-app"
echo "   kubectl config set-context --current --namespace=my-app"

echo -e "\n4Ô∏è‚É£ Access ArgoCD UI:"
echo "   # ‡∏î‡∏π ArgoCD service"
echo "   kubectl get svc -n argocd"
echo ""
echo "   # Get admin password"
echo "   kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d"

echo -e "\n${YELLOW}üõ†Ô∏è Troubleshooting:${NC}"
echo "==================="

echo -e "\n‚ùå Connection refused:"
echo "   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö firewall/security groups"
echo "   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API server endpoint"
echo "   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö network connectivity"

echo -e "\n‚ùå Permission denied:"
echo "   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö RBAC permissions"
echo "   - ‡πÉ‡∏ä‡πâ service account ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
echo "   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö kubeconfig context"

echo -e "\n‚ùå Certificate errors:"
echo "   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö CA certificate"
echo "   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö system time"
echo "   - ‡∏•‡∏≠‡∏á kubectl --insecure-skip-tls-verify (‡πÑ‡∏°‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö production)"

echo -e "\n${GREEN}üéØ ‡∏™‡∏£‡∏∏‡∏õ:${NC}"
echo "======="
echo "1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ join ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó cluster"
echo "2. Copy kubeconfig ‡πÑ‡∏õ‡∏¢‡∏±‡∏á client machine"
echo "3. ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á kubectl ‡∏ö‡∏ô client"
echo "4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"
echo "5. Setup permissions ‡πÅ‡∏•‡∏∞ namespace ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£"

echo -e "\n${BLUE}üìö ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:${NC}"
echo "- Kubernetes Documentation: https://kubernetes.io/docs/"
echo "- kubectl Cheat Sheet: https://kubernetes.io/docs/reference/kubectl/cheatsheet/"
echo "- RBAC Guide: https://kubernetes.io/docs/reference/access-authn-authz/rbac/"

echo -e "\n‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥!"
