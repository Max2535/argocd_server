#!/bin/bash

# =============================================================================
# üöÄ ArgoCD Full Stack Auto Installer
# =============================================================================
# ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Kubernetes + ArgoCD + Nginx Reverse Proxy ‡πÅ‡∏ö‡∏ö One-Click
# ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö: Linux (Ubuntu/CentOS/RHEL) ‡πÅ‡∏•‡∏∞ Windows (Git Bash/WSL)
# =============================================================================

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Global variables
INSTALL_DIR="$(pwd)"
LOG_FILE="$INSTALL_DIR/argocd-install.log"
ARGOCD_PASSWORD=""
KUBECTL_PID=""

# =============================================================================
# üîß Utility Functions
# =============================================================================

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}" | tee -a "$LOG_FILE"
}

log_error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}" | tee -a "$LOG_FILE"
}

log_warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}" | tee -a "$LOG_FILE"
}

log_info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] INFO: $1${NC}" | tee -a "$LOG_FILE"
}

# Check if running on Windows
is_windows() {
    [[ "$(uname -s)" == MINGW* ]] || [[ "$(uname -s)" == CYGWIN* ]] || [[ "$OS" == "Windows_NT" ]]
}

# Check if running on Linux
is_linux() {
    [[ "$(uname -s)" == "Linux" ]]
}

# Check if running as root
is_root() {
    [[ $EUID -eq 0 ]]
}

# Check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Wait for user confirmation
confirm() {
    local message="$1"
    if [[ "$AUTO_YES" == "true" ]]; then
        return 0
    fi
    
    echo -e "${CYAN}$message (y/N): ${NC}"
    read -r response
    [[ "$response" =~ ^[Yy]$ ]]
}

# =============================================================================
# üîç System Detection and Requirements Check
# =============================================================================

detect_system() {
    log "üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£..."
    
    if is_windows; then
        OS_TYPE="windows"
        log_info "‡∏£‡∏∞‡∏ö‡∏ö: Windows (Git Bash/WSL)"
    elif is_linux; then
        OS_TYPE="linux"
        if [[ -f /etc/os-release ]]; then
            source /etc/os-release
            DISTRO="$ID"
            VERSION="$VERSION_ID"
            log_info "‡∏£‡∏∞‡∏ö‡∏ö: $PRETTY_NAME"
        else
            DISTRO="unknown"
            log_warn "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏ Linux distribution ‡πÑ‡∏î‡πâ"
        fi
    else
        log_error "‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö"
        exit 1
    fi
}

check_requirements() {
    log "üìã ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥..."
    
    local errors=0
    
    # Check RAM
    if is_linux; then
        RAM_GB=$(free -m | awk 'NR==2{printf "%.1f", $2/1024}')
        if (( $(echo "$RAM_GB < 4" | bc -l 2>/dev/null || echo "0") )); then
            log_error "RAM: ${RAM_GB}GB (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 4GB)"
            ((errors++))
        else
            log "‚úÖ RAM: ${RAM_GB}GB"
        fi
    else
        log_info "RAM: ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏ô Windows"
    fi
    
    # Check CPU
    CPU_CORES=$(nproc 2>/dev/null || echo "1")
    if [[ $CPU_CORES -lt 2 ]]; then
        log_error "CPU: ${CPU_CORES} cores (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 cores)"
        ((errors++))
    else
        log "‚úÖ CPU: ${CPU_CORES} cores"
    fi
    
    # Check Disk
    if command_exists df; then
        DISK_GB=$(df / 2>/dev/null | awk 'NR==2{printf "%.1f", $4/1024/1024}' || echo "50")
        if (( $(echo "$DISK_GB < 20" | bc -l 2>/dev/null || echo "0") )); then
            log_error "Disk: ${DISK_GB}GB available (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 20GB)"
            ((errors++))
        else
            log "‚úÖ Disk: ${DISK_GB}GB available"
        fi
    fi
    
    # Check Internet
    if ping -c 1 8.8.8.8 >/dev/null 2>&1 || ping -n 1 8.8.8.8 >/dev/null 2>&1; then
        log "‚úÖ Internet connection"
    else
        log_error "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Internet ‡πÑ‡∏î‡πâ"
        ((errors++))
    fi
    
    if [[ $errors -gt 0 ]]; then
        log_error "‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤ $errors ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
        if ! confirm "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"; then
            exit 1
        fi
    fi
}

# =============================================================================
# üì¶ Package Installation Functions
# =============================================================================

install_dependencies_linux() {
    log "üì¶ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Linux..."
    
    if is_root; then
        log_warn "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ root user (‡πÑ‡∏°‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)"
    fi
    
    # Detect package manager and install dependencies
    if command_exists apt-get; then
        # Ubuntu/Debian
        log_info "‡πÉ‡∏ä‡πâ APT package manager"
        sudo apt-get update
        sudo apt-get install -y curl wget gnupg2 software-properties-common apt-transport-https ca-certificates lsb-release
        
        # Install Docker
        if ! command_exists docker; then
            log_info "‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Docker..."
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
            sudo usermod -aG docker $USER
        fi
        
    elif command_exists yum; then
        # RHEL/CentOS
        log_info "‡πÉ‡∏ä‡πâ YUM package manager"
        sudo yum update -y
        sudo yum install -y curl wget
        
        # Install Docker
        if ! command_exists docker; then
            log_info "‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Docker..."
            sudo yum install -y yum-utils
            sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
            sudo yum install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
            sudo usermod -aG docker $USER
        fi
        
    elif command_exists dnf; then
        # Fedora
        log_info "‡πÉ‡∏ä‡πâ DNF package manager"
        sudo dnf update -y
        sudo dnf install -y curl wget
        
        # Install Docker
        if ! command_exists docker; then
            log_info "‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Docker..."
            sudo dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
            sudo dnf install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
            sudo usermod -aG docker $USER
        fi
    else
        log_error "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏ package manager ‡πÑ‡∏î‡πâ"
        exit 1
    fi
    
    # Start Docker and fix permissions
    fix_docker_permissions
    
    # Install kubectl
    install_kubectl_linux
    
    # Install kind
    install_kind_linux
}

install_kubectl_linux() {
    if ! command_exists kubectl; then
        log_info "‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á kubectl..."
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        rm kubectl
    fi
}

install_kind_linux() {
    if ! command_exists kind; then
        log_info "‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á kind..."
        [ $(uname -m) = x86_64 ] && curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64
        chmod +x ./kind
        sudo mv ./kind /usr/local/bin/kind
    fi
}

fix_docker_permissions() {
    log "üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Docker permissions..."
    
    # Start Docker service
    log_info "‡πÄ‡∏£‡∏¥‡πà‡∏° Docker service..."
    sudo systemctl start docker
    sudo systemctl enable docker
    
    # Add user to docker group
    log_info "‡πÄ‡∏û‡∏¥‡πà‡∏° user ‡πÄ‡∏Ç‡πâ‡∏≤ docker group..."
    sudo usermod -aG docker $USER
    
    # Fix socket permissions
    log_info "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Docker socket permissions..."
    sudo chmod 666 /var/run/docker.sock
    
    # Test Docker connection
    if docker info >/dev/null 2>&1; then
        log "‚úÖ Docker ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥"
    else
        log_warn "Docker ‡∏≠‡∏≤‡∏à‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° - ‡∏•‡∏≠‡∏á logout/login ‡∏´‡∏£‡∏∑‡∏≠ reboot"
        log_info "‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏±‡∏ô: newgrp docker"
        
        # Try newgrp workaround
        if command_exists newgrp; then
            log_info "‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏î‡πâ‡∏ß‡∏¢ newgrp..."
            echo "docker info >/dev/null 2>&1" | newgrp docker
        fi
        
        # Final check with sudo
        if sudo docker info >/dev/null 2>&1; then
            log_warn "Docker ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏ß‡∏¢ sudo ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"
            log_info "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ logout/login ‡∏´‡∏£‡∏∑‡∏≠ reboot ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á sudo"
        else
            log_error "Docker ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤"
            log_info "‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:"
            log_info "1. sudo systemctl status docker"
            log_info "2. sudo journalctl -u docker.service"
            if ! confirm "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"; then
                exit 1
            fi
        fi
    fi
}

install_dependencies_windows() {
    log "üì¶ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dependencies ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Windows..."
    
    # Check Docker
    if ! command_exists docker; then
        log_error "Docker ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á"
        log_info "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Docker Desktop:"
        log_info "1. ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å: https://docs.docker.com/desktop/install/windows/"
        log_info "2. ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Kubernetes ‡πÉ‡∏ô Docker Desktop"
        log_info "3. ‡∏£‡∏±‡∏ô script ‡∏ô‡∏µ‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
        exit 1
    fi
    
    # Check if Docker is running
    if ! docker info >/dev/null 2>&1; then
        log_error "Docker ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î Docker Desktop"
        exit 1
    fi
    
    # Check kubectl
    if ! command_exists kubectl; then
        log_error "kubectl ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á"
        log_info "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á kubectl:"
        log_info "1. choco install kubernetes-cli"
        log_info "2. ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å: https://kubernetes.io/docs/tasks/tools/install-kubectl-windows/"
        exit 1
    fi
    
    # Check kind
    if ! command_exists kind; then
        log_info "‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á kind..."
        if command_exists choco; then
            choco install kind
        else
            log_info "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á kind manually:"
            log_info "1. ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å: https://kind.sigs.k8s.io/docs/user/quick-start/#installation"
            log_info "2. ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Chocolatey ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ô: choco install kind"
            if ! confirm "‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á kind ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á?"; then
                exit 1
            fi
        fi
    fi
}

# =============================================================================
# ‚öôÔ∏è Kubernetes Cluster Setup
# =============================================================================

setup_kubernetes_cluster() {
    log "‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Kubernetes cluster..."
    
    # Check Docker first for Linux
    if is_linux; then
        if ! docker info >/dev/null 2>&1; then
            log_warn "Docker ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° - ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á..."
            fix_docker_permissions
            
            # Final check
            if ! docker info >/dev/null 2>&1 && ! sudo docker info >/dev/null 2>&1; then
                log_error "Docker ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
                log_info "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Docker ‡∏Å‡πà‡∏≠‡∏ô:"
                log_info "1. sudo systemctl restart docker"
                log_info "2. sudo chmod 666 /var/run/docker.sock"
                log_info "3. logout ‡πÅ‡∏•‡∏∞ login ‡πÉ‡∏´‡∏°‡πà"
                log_info "4. ‡∏´‡∏£‡∏∑‡∏≠ reboot server"
                exit 1
            fi
        fi
    fi
    
    # Check if cluster already exists
    if kubectl cluster-info >/dev/null 2>&1; then
        CURRENT_CONTEXT=$(kubectl config current-context 2>/dev/null || echo "none")
        log_warn "‡∏û‡∏ö Kubernetes cluster ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: $CURRENT_CONTEXT"
        
        if confirm "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ cluster ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?"; then
            log "‚úÖ ‡πÉ‡∏ä‡πâ cluster ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà: $CURRENT_CONTEXT"
            return 0
        fi
    fi
    
    # Create new kind cluster
    log_info "‡∏™‡∏£‡πâ‡∏≤‡∏á kind cluster ‡πÉ‡∏´‡∏°‡πà..."
    
    # Delete existing cluster if any
    kind delete cluster --name argocd-cluster 2>/dev/null || true
    
    # Create kind cluster configuration
    cat > kind-config.yaml <<EOF
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
name: argocd-cluster
nodes:
- role: control-plane
  kubeadmConfigPatches:
  - |
    kind: InitConfiguration
    nodeRegistration:
      kubeletExtraArgs:
        node-labels: "ingress-ready=true"
  extraPortMappings:
  - containerPort: 80
    hostPort: 8080
    protocol: TCP
  - containerPort: 443
    hostPort: 8443
    protocol: TCP
EOF
    
    # Create cluster
    kind create cluster --config kind-config.yaml --wait 300s
    
    if [[ $? -eq 0 ]]; then
        log "‚úÖ Kind cluster ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
        kubectl config use-context kind-argocd-cluster
    else
        log_error "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á kind cluster ‡πÑ‡∏î‡πâ"
        exit 1
    fi
    
    # Wait for cluster to be ready
    log_info "‡∏£‡∏≠‡πÉ‡∏´‡πâ cluster ‡∏û‡∏£‡πâ‡∏≠‡∏°..."
    kubectl wait --for=condition=Ready nodes --all --timeout=300s
    
    # Clean up
    rm -f kind-config.yaml
}

# =============================================================================
# üî± ArgoCD Installation
# =============================================================================

install_argocd() {
    log "üî± ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ArgoCD..."
    
    # Create namespace
    kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -
    
    # Install ArgoCD
    log_info "‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ArgoCD manifests..."
    kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
    
    # Wait for ArgoCD to be ready
    log_info "‡∏£‡∏≠‡πÉ‡∏´‡πâ ArgoCD pods ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ 2-3 ‡∏ô‡∏≤‡∏ó‡∏µ)..."
    kubectl wait --for=condition=available --timeout=600s deployment/argocd-server -n argocd
    
    if [[ $? -eq 0 ]]; then
        log "‚úÖ ArgoCD ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
    else
        log_error "ArgoCD ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
        exit 1
    fi
    
    # Get initial admin password
    log_info "‡∏£‡∏±‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô admin ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô..."
    local max_attempts=30
    local attempt=1
    
    while [[ $attempt -le $max_attempts ]]; do
        ARGOCD_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" 2>/dev/null | base64 -d 2>/dev/null)
        if [[ ! -z "$ARGOCD_PASSWORD" ]]; then
            log "‚úÖ ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô admin: $ARGOCD_PASSWORD"
            break
        fi
        log_info "‡∏£‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô admin... (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà $attempt/$max_attempts)"
        sleep 10
        ((attempt++))
    done
    
    if [[ -z "$ARGOCD_PASSWORD" ]]; then
        log_warn "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô admin ‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á:"
        log_warn "kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d"
    fi
}

# =============================================================================
# üåê Nginx Reverse Proxy Setup
# =============================================================================

setup_nginx_proxy() {
    log "üåê ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Nginx Reverse Proxy..."
    
    # Create nginx config directory
    mkdir -p nginx-proxy
    
    # Create nginx configuration
    cat > nginx-proxy/default.conf <<EOF
upstream argocd {
    server host.docker.internal:8080;
}

server {
    listen 80;
    server_name localhost;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    
    location / {
        proxy_pass https://argocd;
        proxy_ssl_verify off;
        
        # Headers for ArgoCD
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_set_header X-Forwarded-Host \$host;
        proxy_set_header X-Forwarded-Server \$host;
        
        # WebSocket support for ArgoCD
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_buffering off;
        proxy_read_timeout 86400;
        proxy_send_timeout 86400;
        
        # Handle large requests
        client_max_body_size 0;
        proxy_request_buffering off;
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "ArgoCD Proxy OK\\n";
        add_header Content-Type text/plain;
    }
    
    # Nginx status page
    location /nginx-status {
        access_log off;
        return 200 "Nginx OK\\n";
        add_header Content-Type text/plain;
    }
}
EOF
    
    # Create docker-compose for nginx
    cat > docker-compose-proxy.yml <<EOF
services:
  nginx-argocd:
    image: nginx:alpine
    container_name: nginx-argocd-proxy
    ports:
      - "80:80"
    volumes:
      - ./nginx-proxy/default.conf:/etc/nginx/conf.d/default.conf:ro
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/nginx-status"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - argocd-net

networks:
  argocd-net:
    driver: bridge
EOF
    
    log "‚úÖ Nginx configuration ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
}

start_nginx_proxy() {
    log "üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Nginx Reverse Proxy..."
    
    # Stop existing nginx if any
    docker-compose -f docker-compose-proxy.yml down 2>/dev/null || true
    
    # Start nginx
    docker-compose -f docker-compose-proxy.yml up -d
    
    if [[ $? -eq 0 ]]; then
        log "‚úÖ Nginx Reverse Proxy ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
        
        # Wait for nginx to be ready
        sleep 5
        
        # Test nginx
        if curl -s -o /dev/null -w "%{http_code}" http://localhost/nginx-status 2>/dev/null | grep -q "200"; then
            log "‚úÖ Nginx health check ‡∏ú‡πà‡∏≤‡∏ô"
        else
            log_warn "Nginx health check ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô"
        fi
    else
        log_error "Nginx Reverse Proxy ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
        exit 1
    fi
}

# =============================================================================
# üîó Port Forwarding Setup
# =============================================================================

setup_port_forwarding() {
    log "üîó ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ kubectl port-forwarding..."
    
    # Kill existing port-forward processes
    pkill -f "kubectl.*port-forward.*argocd-server" 2>/dev/null || true
    
    # Start port-forward in background
    kubectl port-forward svc/argocd-server -n argocd 8080:443 >/dev/null 2>&1 &
    KUBECTL_PID=$!
    
    # Save PID for cleanup
    echo $KUBECTL_PID > .kubectl-proxy.pid
    
    # Wait and test
    sleep 5
    if kill -0 $KUBECTL_PID 2>/dev/null; then
        if curl -k -s https://localhost:8080 >/dev/null 2>&1; then
            log "‚úÖ kubectl port-forward ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà (PID: $KUBECTL_PID)"
        else
            log_warn "kubectl port-forward ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ï‡πà ArgoCD ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°"
        fi
    else
        log_error "kubectl port-forward ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
        exit 1
    fi
}

# =============================================================================
# üß™ System Testing
# =============================================================================

test_installation() {
    log "üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á..."
    
    local errors=0
    
    # Test Kubernetes cluster
    log_info "‡∏ó‡∏î‡∏™‡∏≠‡∏ö Kubernetes cluster..."
    if kubectl cluster-info >/dev/null 2>&1; then
        log "‚úÖ Kubernetes cluster ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà"
    else
        log_error "Kubernetes cluster ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
        ((errors++))
    fi
    
    # Test ArgoCD pods
    log_info "‡∏ó‡∏î‡∏™‡∏≠‡∏ö ArgoCD pods..."
    local ready_pods=$(kubectl get pods -n argocd --no-headers 2>/dev/null | grep Running | wc -l)
    local total_pods=$(kubectl get pods -n argocd --no-headers 2>/dev/null | wc -l)
    
    if [[ $ready_pods -gt 0 ]] && [[ $ready_pods -eq $total_pods ]]; then
        log "‚úÖ ArgoCD pods ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà ($ready_pods/$total_pods)"
    else
        log_error "ArgoCD pods ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏á ($ready_pods/$total_pods)"
        ((errors++))
    fi
    
    # Test port forwarding
    log_info "‡∏ó‡∏î‡∏™‡∏≠‡∏ö kubectl port-forward..."
    if curl -k -s https://localhost:8080 >/dev/null 2>&1; then
        log "‚úÖ kubectl port-forward ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà"
    else
        log_error "kubectl port-forward ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
        ((errors++))
    fi
    
    # Test nginx proxy
    log_info "‡∏ó‡∏î‡∏™‡∏≠‡∏ö Nginx proxy..."
    local response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost 2>/dev/null || echo "000")
    if [[ "$response" == "200" ]]; then
        log "‚úÖ Nginx proxy ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà"
    else
        log_error "Nginx proxy ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (HTTP $response)"
        ((errors++))
    fi
    
    # Test ArgoCD UI
    log_info "‡∏ó‡∏î‡∏™‡∏≠‡∏ö ArgoCD UI..."
    if curl -s http://localhost 2>/dev/null | grep -q "Argo CD"; then
        log "‚úÖ ArgoCD UI ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
    else
        log_error "ArgoCD UI ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
        ((errors++))
    fi
    
    return $errors
}

# =============================================================================
# üìù Management Scripts Creation
# =============================================================================

create_management_scripts() {
    log "üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á management scripts..."
    
    # Create start script
    cat > start-argocd.sh <<'EOF'
#!/bin/bash
echo "üöÄ Starting ArgoCD Full Stack..."

# Start Kubernetes cluster (kind)
if ! kubectl cluster-info >/dev/null 2>&1; then
    echo "‚ö†Ô∏è  Kubernetes cluster ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô..."
    if command -v kind >/dev/null 2>&1; then
        kind create cluster --name argocd-cluster 2>/dev/null || echo "Cluster ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"
    fi
fi

# Start port forwarding
echo "üîó Starting port forwarding..."
pkill -f "kubectl.*port-forward.*argocd-server" 2>/dev/null || true
kubectl port-forward svc/argocd-server -n argocd 8080:443 >/dev/null 2>&1 &
echo $! > .kubectl-proxy.pid

# Start nginx proxy
echo "üåê Starting Nginx proxy..."
docker-compose -f docker-compose-proxy.yml up -d

echo "‚úÖ ArgoCD ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"
echo "üåê URL: http://localhost"
echo "üë§ Username: admin"
echo "üîë Password: $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" 2>/dev/null | base64 -d 2>/dev/null || echo '‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á get-password.sh')"
EOF
    
    # Create stop script
    cat > stop-argocd.sh <<'EOF'
#!/bin/bash
echo "üõë Stopping ArgoCD Full Stack..."

# Stop nginx proxy
echo "üåê Stopping Nginx proxy..."
docker-compose -f docker-compose-proxy.yml down 2>/dev/null || true

# Stop port forwarding
echo "üîó Stopping port forwarding..."
if [[ -f .kubectl-proxy.pid ]]; then
    kill $(cat .kubectl-proxy.pid) 2>/dev/null || true
    rm -f .kubectl-proxy.pid
fi
pkill -f "kubectl.*port-forward.*argocd-server" 2>/dev/null || true

echo "‚úÖ ArgoCD ‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß"
EOF
    
    # Create status script
    cat > status-argocd.sh <<'EOF'
#!/bin/bash
echo "üìä ArgoCD Full Stack Status"
echo "=========================="

# Kubernetes cluster
echo "üîß Kubernetes Cluster:"
if kubectl cluster-info >/dev/null 2>&1; then
    echo "  ‚úÖ Running ($(kubectl config current-context))"
    echo "  üì¶ Nodes: $(kubectl get nodes --no-headers | wc -l)"
else
    echo "  ‚ùå Not Running"
fi

# ArgoCD
echo ""
echo "üî± ArgoCD:"
ready_pods=$(kubectl get pods -n argocd --no-headers 2>/dev/null | grep Running | wc -l || echo 0)
total_pods=$(kubectl get pods -n argocd --no-headers 2>/dev/null | wc -l || echo 0)
if [[ $ready_pods -gt 0 ]]; then
    echo "  ‚úÖ Running ($ready_pods/$total_pods pods)"
else
    echo "  ‚ùå Not Running"
fi

# Port forwarding
echo ""
echo "üîó Port Forwarding:"
if [[ -f .kubectl-proxy.pid ]] && kill -0 $(cat .kubectl-proxy.pid) 2>/dev/null; then
    echo "  ‚úÖ Running (PID: $(cat .kubectl-proxy.pid))"
else
    echo "  ‚ùå Not Running"
fi

# Nginx proxy
echo ""
echo "üåê Nginx Proxy:"
if docker ps | grep -q nginx-argocd-proxy; then
    echo "  ‚úÖ Running"
    if curl -s http://localhost/nginx-status >/dev/null 2>&1; then
        echo "  ‚úÖ Health check: OK"
    else
        echo "  ‚ö†Ô∏è  Health check: Failed"
    fi
else
    echo "  ‚ùå Not Running"
fi

# ArgoCD UI
echo ""
echo "üñ•Ô∏è  ArgoCD UI:"
if curl -s http://localhost >/dev/null 2>&1; then
    echo "  ‚úÖ Accessible at http://localhost"
    echo "  üë§ Username: admin"
    password=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" 2>/dev/null | base64 -d 2>/dev/null)
    if [[ ! -z "$password" ]]; then
        echo "  üîë Password: $password"
    else
        echo "  üîë Password: ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á get-password.sh"
    fi
else
    echo "  ‚ùå Not Accessible"
fi
EOF
    
    # Create password retrieval script
    cat > get-password.sh <<'EOF'
#!/bin/bash
echo "üîë ArgoCD Admin Password:"
password=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" 2>/dev/null | base64 -d 2>/dev/null)
if [[ ! -z "$password" ]]; then
    echo "Password: $password"
else
    echo "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ"
    echo "‡∏•‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d"
fi
EOF
    
    # Create uninstall script
    cat > uninstall-argocd.sh <<'EOF'
#!/bin/bash
echo "üóëÔ∏è  Uninstalling ArgoCD Full Stack..."

read -p "‚ö†Ô∏è  ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏•‡∏ö ArgoCD ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/N): " -r
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏ö"
    exit 0
fi

# Stop services
echo "üõë Stopping services..."
./stop-argocd.sh 2>/dev/null || true

# Remove ArgoCD
echo "üî± Removing ArgoCD..."
kubectl delete namespace argocd 2>/dev/null || true

# Remove kind cluster
echo "üîß Removing kind cluster..."
kind delete cluster --name argocd-cluster 2>/dev/null || true

# Remove Docker containers and images
echo "üê≥ Cleaning up Docker..."
docker-compose -f docker-compose-proxy.yml down --rmi all 2>/dev/null || true
docker system prune -f 2>/dev/null || true

# Remove files
echo "üßπ Cleaning up files..."
rm -f .kubectl-proxy.pid
rm -rf nginx-proxy/
rm -f docker-compose-proxy.yml
rm -f kind-config.yaml

echo "‚úÖ ArgoCD ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"
EOF
    
    # Make scripts executable
    chmod +x start-argocd.sh stop-argocd.sh status-argocd.sh get-password.sh uninstall-argocd.sh
    
    log "‚úÖ Management scripts ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
}

# =============================================================================
# üìã Installation Summary and Instructions
# =============================================================================

show_installation_summary() {
    log "üéâ ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ArgoCD ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!"
    echo ""
    echo -e "${GREEN}=================================${NC}"
    echo -e "${GREEN}üöÄ ArgoCD Full Stack Ready! üöÄ${NC}"
    echo -e "${GREEN}=================================${NC}"
    echo ""
    echo -e "${CYAN}üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:${NC}"
    echo -e "   üåê URL: ${BLUE}http://localhost${NC}"
    echo -e "   üë§ Username: ${YELLOW}admin${NC}"
    if [[ ! -z "$ARGOCD_PASSWORD" ]]; then
        echo -e "   üîë Password: ${YELLOW}$ARGOCD_PASSWORD${NC}"
    else
        echo -e "   üîë Password: ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ${YELLOW}./get-password.sh${NC}"
    fi
    echo ""
    echo -e "${CYAN}üõ†Ô∏è  Management Commands:${NC}"
    echo -e "   ${GREEN}./start-argocd.sh${NC}     - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ArgoCD"
    echo -e "   ${RED}./stop-argocd.sh${NC}      - ‡∏´‡∏¢‡∏∏‡∏î ArgoCD"
    echo -e "   ${BLUE}./status-argocd.sh${NC}    - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"
    echo -e "   ${YELLOW}./get-password.sh${NC}     - ‡∏î‡∏π‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô admin"
    echo -e "   ${RED}./uninstall-argocd.sh${NC} - ‡∏ñ‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á"
    echo ""
    echo -e "${CYAN}üì¶ ‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á:${NC}"
    echo -e "   ‚úÖ Kubernetes cluster (kind)"
    echo -e "   ‚úÖ ArgoCD"
    echo -e "   ‚úÖ Nginx Reverse Proxy"
    echo -e "   ‚úÖ Management Scripts"
    echo ""
    echo -e "${CYAN}üîó Links:${NC}"
    echo -e "   üìñ ArgoCD Documentation: ${BLUE}https://argo-cd.readthedocs.io/${NC}"
    echo -e "   üéì Getting Started Guide: ${BLUE}https://argo-cd.readthedocs.io/en/stable/getting_started/${NC}"
    echo ""
    echo -e "${GREEN}üéØ Ready to deploy your applications with GitOps!${NC}"
    echo ""
}

# =============================================================================
# üö® Error Handling and Cleanup
# =============================================================================

cleanup_on_error() {
    log_error "‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î..."
    
    # Stop services
    docker-compose -f docker-compose-proxy.yml down 2>/dev/null || true
    
    # Kill port forwarding
    if [[ ! -z "$KUBECTL_PID" ]]; then
        kill $KUBECTL_PID 2>/dev/null || true
    fi
    pkill -f "kubectl.*port-forward.*argocd-server" 2>/dev/null || true
    
    # Remove temporary files
    rm -f .kubectl-proxy.pid kind-config.yaml docker-compose-proxy.yml
    
    log_error "‡∏î‡∏π log file ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: $LOG_FILE"
}

# Set trap for cleanup on error
trap cleanup_on_error ERR

# =============================================================================
# üé¨ Main Installation Flow
# =============================================================================

main() {
    echo -e "${PURPLE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                                                                  ‚ïë"
    echo "‚ïë              üöÄ ArgoCD Full Stack Auto Installer üöÄ              ‚ïë"
    echo "‚ïë                                                                  ‚ïë"
    echo "‚ïë  ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Kubernetes + ArgoCD + Nginx Reverse Proxy ‡πÅ‡∏ö‡∏ö One-Click  ‚ïë"
    echo "‚ïë                                                                  ‚ïë"
    echo "‚ïë        ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö: Linux (Ubuntu/CentOS/RHEL) ‡πÅ‡∏•‡∏∞ Windows            ‚ïë"
    echo "‚ïë                                                                  ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
    echo ""
    
    # Parse command line arguments
    AUTO_YES=false
    SKIP_DEPS=false
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            -y|--yes)
                AUTO_YES=true
                shift
                ;;
            --skip-deps)
                SKIP_DEPS=true
                shift
                ;;
            -h|--help)
                echo "Usage: $0 [OPTIONS]"
                echo ""
                echo "Options:"
                echo "  -y, --yes       ‡∏ï‡∏≠‡∏ö 'yes' ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° (non-interactive mode)"
                echo "  --skip-deps     ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies"
                echo "  -h, --help      ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ"
                exit 0
                ;;
            *)
                log_error "‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å: $1"
                exit 1
                ;;
        esac
    done
    
    # Initialize log file
    echo "ArgoCD Full Stack Installation Log - $(date)" > "$LOG_FILE"
    
    log "üèÅ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ArgoCD Full Stack..."
    
    # Step 1: Detect system
    detect_system
    
    # Step 2: Check requirements
    check_requirements
    
    # Step 3: Install dependencies
    if [[ "$SKIP_DEPS" != "true" ]]; then
        if is_linux; then
            install_dependencies_linux
        else
            install_dependencies_windows
        fi
    else
        log_info "‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies"
    fi
    
    # Step 4: Setup Kubernetes cluster
    setup_kubernetes_cluster
    
    # Step 5: Install ArgoCD
    install_argocd
    
    # Step 6: Setup port forwarding
    setup_port_forwarding
    
    # Step 7: Setup Nginx reverse proxy
    setup_nginx_proxy
    start_nginx_proxy
    
    # Step 8: Test installation
    log "üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á..."
    if ! test_installation; then
        log_error "‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô"
        exit 1
    fi
    
    # Step 9: Create management scripts
    create_management_scripts
    
    # Step 10: Show summary
    show_installation_summary
    
    log "‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!"
}

# =============================================================================
# üöÄ Script Entry Point
# =============================================================================

# Check if script is being sourced or executed
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
