#!/bin/bash

# =============================================================================
# üîó Auto Join kind Cluster Client
# =============================================================================

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

echo "üîó Auto Join kind Cluster Client"
echo "==============================="

# Check if kind is available
if ! command -v kind >/dev/null 2>&1; then
    log_error "kind ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á"
    exit 1
fi

# Check if kubectl is available
if ! command -v kubectl >/dev/null 2>&1; then
    log_error "kubectl ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á"
    exit 1
fi

# List available clusters
echo -e "\n1Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö kind clusters ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà:"
CLUSTERS=$(kind get clusters 2>/dev/null)

if [ -z "$CLUSTERS" ]; then
    log_error "‡πÑ‡∏°‡πà‡∏û‡∏ö kind clusters"
    echo "   ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á cluster ‡∏Å‡πà‡∏≠‡∏ô:"
    echo "   ./install-full-stack.sh"
    exit 1
fi

echo "   ‡∏û‡∏ö clusters:"
echo "$CLUSTERS" | sed 's/^/   - /'

# Select cluster
if [ $# -eq 1 ]; then
    CLUSTER_NAME="$1"
else
    echo -e "\nüìù ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å cluster:"
    select CLUSTER_NAME in $CLUSTERS; do
        if [ -n "$CLUSTER_NAME" ]; then
            break
        fi
        echo "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
    done
fi

log "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å cluster: $CLUSTER_NAME"

# Get cluster info
echo -e "\n2Ô∏è‚É£ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• cluster:"
kubectl cluster-info --context kind-$CLUSTER_NAME 2>/dev/null || {
    log_error "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ cluster ‡πÑ‡∏î‡πâ"
    exit 1
}

# Get server IP/Port
CLUSTER_ENDPOINT=$(kubectl config view --context kind-$CLUSTER_NAME -o jsonpath='{.clusters[0].cluster.server}')
log "Cluster endpoint: $CLUSTER_ENDPOINT"

# Extract port
CLUSTER_PORT=$(echo $CLUSTER_ENDPOINT | sed 's/.*://')
log "Cluster port: $CLUSTER_PORT"

# Get current server IP (for Docker networks)
if command -v docker >/dev/null 2>&1; then
    CONTAINER_NAME="$CLUSTER_NAME-control-plane"
    CONTAINER_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $CONTAINER_NAME 2>/dev/null)
    if [ -n "$CONTAINER_IP" ]; then
        log "Container IP: $CONTAINER_IP"
    fi
fi

# Get current external IP
EXTERNAL_IP=$(curl -s ifconfig.me 2>/dev/null || curl -s ipinfo.io/ip 2>/dev/null || echo "unknown")
LOCAL_IP=$(ip route get 1 | awk '{print $7}' | head -1 2>/dev/null || hostname -I | awk '{print $1}' 2>/dev/null || echo "127.0.0.1")

echo -e "\n3Ô∏è‚É£ ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å IP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö client connection:"
echo "   1. Local: 127.0.0.1 (localhost only)"
echo "   2. LAN: $LOCAL_IP (local network)"
if [ "$EXTERNAL_IP" != "unknown" ]; then
    echo "   3. External: $EXTERNAL_IP (internet)"
fi
echo ""

read -p "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å IP type (1-3): " ip_choice

case $ip_choice in
    1) TARGET_IP="127.0.0.1" ;;
    2) TARGET_IP="$LOCAL_IP" ;;
    3) TARGET_IP="$EXTERNAL_IP" ;;
    *) TARGET_IP="127.0.0.1" ;;
esac

log "‡πÉ‡∏ä‡πâ IP: $TARGET_IP"

# Generate kubeconfig
echo -e "\n4Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á kubeconfig ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö client:"

OUTPUT_FILE="kubeconfig-$CLUSTER_NAME-client.yaml"
kind get kubeconfig --name=$CLUSTER_NAME > $OUTPUT_FILE

if [ $? -eq 0 ]; then
    log "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á kubeconfig: $OUTPUT_FILE"
    
    # Replace server IP
    if [ "$TARGET_IP" != "127.0.0.1" ]; then
        sed -i "s/127.0.0.1/$TARGET_IP/g" $OUTPUT_FILE
        log "‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç server IP ‡πÄ‡∏õ‡πá‡∏ô $TARGET_IP"
    fi
    
    # Show content
    echo -e "\nüìÑ ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ kubeconfig:"
    cat $OUTPUT_FILE | head -20
    echo "   ..."
    
else
    log_error "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á kubeconfig ‡πÑ‡∏î‡πâ"
    exit 1
fi

# Generate client setup script
echo -e "\n5Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö client machine:"

CLIENT_SCRIPT="setup-client-$CLUSTER_NAME.sh"
cat > $CLIENT_SCRIPT << EOF
#!/bin/bash

# Auto-generated client setup script for kind cluster: $CLUSTER_NAME
# Generated on: $(date)

echo "üîó Setup Kubernetes Client for $CLUSTER_NAME"
echo "============================================"

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

log() { echo -e "\${GREEN}[INFO]\${NC} \$1"; }
log_warn() { echo -e "\${YELLOW}[WARN]\${NC} \$1"; }
log_error() { echo -e "\${RED}[ERROR]\${NC} \$1"; }

# 1. Check kubectl
if ! command -v kubectl >/dev/null 2>&1; then
    log_warn "kubectl ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á"
    echo "Installing kubectl..."
    
    # Install kubectl (Linux)
    curl -LO "https://dl.k8s.io/release/\$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
    chmod +x kubectl
    sudo mv kubectl /usr/local/bin/
    
    if ! command -v kubectl >/dev/null 2>&1; then
        log_error "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á kubectl ‡πÑ‡∏î‡πâ"
        exit 1
    fi
fi

log "‚úÖ kubectl version: \$(kubectl version --client --short 2>/dev/null || kubectl version --client)"

# 2. Setup kubeconfig
log "Setup kubeconfig..."
mkdir -p ~/.kube

# Backup existing config
if [ -f ~/.kube/config ]; then
    cp ~/.kube/config ~/.kube/config.backup.\$(date +%Y%m%d_%H%M%S)
    log "‚úÖ Backup existing config"
fi

# Use the kubeconfig from this directory
if [ -f kubeconfig-$CLUSTER_NAME-client.yaml ]; then
    cp kubeconfig-$CLUSTER_NAME-client.yaml ~/.kube/config
    log "‚úÖ Setup kubeconfig"
else
    log_error "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå kubeconfig-$CLUSTER_NAME-client.yaml"
    exit 1
fi

# 3. Test connection
log "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠..."
if kubectl cluster-info >/dev/null 2>&1; then
    log "‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ cluster ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
    
    echo ""
    echo "üìä Cluster Information:"
    kubectl cluster-info
    
    echo ""
    echo "üîç Nodes:"
    kubectl get nodes -o wide
    
    echo ""
    echo "üì¶ Namespaces:"
    kubectl get namespaces
    
    # Check ArgoCD
    if kubectl get namespace argocd >/dev/null 2>&1; then
        echo ""
        echo "üöÄ ArgoCD Status:"
        kubectl get pods -n argocd
        
        echo ""
        echo "üåê ArgoCD Service:"
        kubectl get svc -n argocd
        
        echo ""
        echo "üîë ArgoCD Admin Password:"
        kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
        echo ""
        
        echo ""
        echo "üí° Access ArgoCD:"
        echo "   1. Port Forward: kubectl port-forward svc/argocd-server -n argocd 8080:443"
        echo "   2. Browse: http://localhost:8080"
        echo "   3. Login: admin / <password above>"
    fi
    
else
    log_error "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ cluster ‡πÑ‡∏î‡πâ"
    echo ""
    echo "üîç Troubleshooting:"
    echo "   1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö network connectivity:"
    echo "      ping $TARGET_IP"
    echo "      telnet $TARGET_IP $CLUSTER_PORT"
    echo ""
    echo "   2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö firewall:"
    echo "      Port $CLUSTER_PORT ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏¥‡∏î"
    echo ""
    echo "   3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cluster ‡∏ö‡∏ô server:"
    echo "      kubectl cluster-info"
    echo "      docker ps | grep $CLUSTER_NAME"
    exit 1
fi

echo ""
log "üéâ Setup ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!"
echo ""
echo "üìù ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô:"
echo "   kubectl get nodes"
echo "   kubectl get pods --all-namespaces"
echo "   kubectl config get-contexts"
echo ""

EOF

chmod +x $CLIENT_SCRIPT
log "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå client: $CLIENT_SCRIPT"

# Generate copy instructions
echo -e "\n6Ô∏è‚É£ ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏ô client machine:"
echo "================================"

echo "üìã Copy files ‡πÑ‡∏õ‡∏¢‡∏±‡∏á client machine:"
echo "   scp $OUTPUT_FILE user@client-machine:~/"
echo "   scp $CLIENT_SCRIPT user@client-machine:~/"
echo ""

echo "üìã ‡∏£‡∏±‡∏ô‡∏ö‡∏ô client machine:"
echo "   chmod +x $CLIENT_SCRIPT"
echo "   ./$CLIENT_SCRIPT"
echo ""

echo "üìã ‡∏´‡∏£‡∏∑‡∏≠ manual setup:"
echo "   mkdir -p ~/.kube"
echo "   cp $OUTPUT_FILE ~/.kube/config"
echo "   kubectl cluster-info"
echo ""

# Test current connection
echo -e "\n7Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å server:"
if kubectl cluster-info >/dev/null 2>&1; then
    log "‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å server ‡πÑ‡∏î‡πâ"
    
    echo ""
    echo "üìä Cluster Info:"
    kubectl cluster-info
    
    # Check if accessible from target IP
    if [ "$TARGET_IP" != "127.0.0.1" ]; then
        echo ""
        log "üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≤‡∏Å IP: $TARGET_IP"
        if timeout 5 bash -c "echo >/dev/tcp/$TARGET_IP/$CLUSTER_PORT" 2>/dev/null; then
            log "‚úÖ Port $CLUSTER_PORT ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô $TARGET_IP"
        else
            log_warn "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á port $CLUSTER_PORT ‡∏ö‡∏ô $TARGET_IP ‡πÑ‡∏î‡πâ"
            echo "   ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç firewall ‡∏´‡∏£‡∏∑‡∏≠ network settings"
        fi
    fi
    
else
    log_error "‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ cluster ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ"
fi

echo -e "\nüìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á:"
echo "   - $OUTPUT_FILE (kubeconfig)"
echo "   - $CLIENT_SCRIPT (client setup script)"

echo -e "\n${GREEN}üéØ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!${NC}"
