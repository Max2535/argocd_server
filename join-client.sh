#!/bin/bash

# =============================================================================
# üîó ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Client ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö Kubernetes Cluster
# =============================================================================

# ‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() { echo -e "${GREEN}[INFO]${NC} $1"; }
warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; }
info() { echo -e "${BLUE}[INFO]${NC} $1"; }

echo "üîó ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Client ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö Kubernetes Cluster"
echo "=============================================="
echo ""

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ kubectl ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if ! command -v kubectl >/dev/null 2>&1; then
    error "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á kubectl ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
    warn "‡∏ß‡∏¥‡∏ò‡∏µ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á kubectl:"
    echo "- Windows: https://kubernetes.io/docs/tasks/tools/install-kubectl-windows/"
    echo "- Linux: https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/"
    echo "- macOS: https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/"
    exit 1
fi

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏ö‡∏ô Master Node ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if ! kubectl get nodes >/dev/null 2>&1; then
    warn "‡πÑ‡∏°‡πà‡∏û‡∏ö Kubernetes nodes ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á"
    echo ""
    info "‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ô‡∏ö‡∏ô Master Node ‡∏ó‡∏µ‡πà‡∏°‡∏µ Kubernetes Cluster ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà"
    echo ""
    exit 1
fi

# ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• cluster
CLUSTER_NAME=$(kubectl config current-context 2>/dev/null || echo "kubernetes")
SERVER_URL=$(kubectl config view --minify -o jsonpath='{.clusters[0].cluster.server}' 2>/dev/null || echo "Unknown")
MASTER_IP=$(echo "$SERVER_URL" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' || hostname -I | awk '{print $1}')

# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• cluster
echo "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Kubernetes Cluster:"
echo "=========================="
echo "üîπ Cluster Name: $CLUSTER_NAME"
echo "üîπ Master IP: $MASTER_IP"
echo "üîπ API Server: $SERVER_URL"
echo ""

# ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ nodes
NODE_COUNT=$(kubectl get nodes --no-headers | wc -l)
echo "üñ•Ô∏è ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Nodes ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: $NODE_COUNT"
kubectl get nodes -o wide | head -1
kubectl get nodes -o wide | tail -n+2 | sort
echo ""

# ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å
while true; do
    echo "‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Client:"
    echo "1) ‡∏™‡∏£‡πâ‡∏≤‡∏á kubeconfig ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"
    echo "2) ‡∏™‡∏£‡πâ‡∏≤‡∏á join token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö worker node"
    echo "3) ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á kubectl ‡∏ö‡∏ô client"
    echo "4) ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"
    echo "5) ‡∏™‡∏£‡πâ‡∏≤‡∏á kubeconfig ‡πÅ‡∏ö‡∏ö portable"
    echo "q) ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"
    
    read -p "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1-5 ‡∏´‡∏£‡∏∑‡∏≠ q): " choice
    echo ""
    
    case $choice in
        1)
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á kubeconfig
            echo "üîß ‡∏™‡∏£‡πâ‡∏≤‡∏á kubeconfig ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"
            echo "=================================="
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå kubeconfig
            KUBECONFIG_FILE="kubeconfig-client-$(date +%Y%m%d).yaml"
            
            log "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå kubeconfig..."
            kubectl config view --raw > "$KUBECONFIG_FILE"
            
            if [ -f "$KUBECONFIG_FILE" ]; then
                log "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå kubeconfig ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: $KUBECONFIG_FILE"
                log "‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå: $(du -h "$KUBECONFIG_FILE" | cut -f1)"
                
                echo ""
                log "‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏ô client:"
                echo "1. ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå $KUBECONFIG_FILE ‡πÑ‡∏õ‡∏¢‡∏±‡∏á client"
                echo "2. ‡∏ö‡∏ô client ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ environment variable:"
                echo "   export KUBECONFIG=/path/to/$KUBECONFIG_FILE"
                echo "3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: kubectl cluster-info"
                echo ""
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå
                echo "üìã ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å client (‡∏£‡∏±‡∏ô‡∏ö‡∏ô client):"
                echo "scp $(whoami)@$MASTER_IP:$(pwd)/$KUBECONFIG_FILE ~/kubeconfig.yaml"
                echo ""
            else
                error "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå kubeconfig ‡πÑ‡∏î‡πâ"
            fi
            ;;
        
        2)
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á join token
            echo "üîë ‡∏™‡∏£‡πâ‡∏≤‡∏á Join Token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Worker Node"
            echo "=================================="
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô kubeadm cluster ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if ! command -v kubeadm >/dev/null 2>&1; then
                error "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á kubeadm"
                warn "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏±‡∏ö cluster ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ kubeadm ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"
                echo ""
                continue
            fi
            
            log "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö join node..."
            JOIN_COMMAND=$(sudo kubeadm token create --print-join-command 2>/dev/null)
            
            if [ -n "$JOIN_COMMAND" ]; then
                log "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
                echo ""
                echo "üìã ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏° node (‡∏£‡∏±‡∏ô‡∏ö‡∏ô worker node ‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå root):"
                echo "$JOIN_COMMAND"
                echo ""
                
                log "‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏ô worker node:"
                echo "1. ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Docker, kubelet, kubeadm ‡πÅ‡∏•‡∏∞ kubectl ‡∏ö‡∏ô worker node"
                echo "2. ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á join ‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå root"
                echo "3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: kubectl get nodes"
                echo ""
            else
                error "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á join token ‡πÑ‡∏î‡πâ"
                warn "‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà kubeadm cluster"
                echo ""
            fi
            ;;
        
        3)
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á kubectl
            echo "üîß ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á kubectl ‡∏ö‡∏ô Client"
            echo "==========================="
            
            echo "üìã ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Ubuntu/Debian:"
            echo "sudo apt-get update"
            echo "sudo apt-get install -y apt-transport-https ca-certificates curl"
            echo "curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg"
            echo "echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list"
            echo "sudo apt-get update"
            echo "sudo apt-get install -y kubectl"
            echo ""
            
            echo "üìã ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CentOS/RHEL:"
            echo "cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo"
            echo "[kubernetes]"
            echo "name=Kubernetes"
            echo "baseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/"
            echo "enabled=1"
            echo "gpgcheck=1"
            echo "gpgkey=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key"
            echo "EOF"
            echo "sudo yum install -y kubectl"
            echo ""
            
            echo "üìã ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Windows (PowerShell):"
            echo "# ‡πÉ‡∏ä‡πâ Chocolatey"
            echo "choco install kubernetes-cli"
            echo ""
            echo "# ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ winget"
            echo "winget install -e --id Kubernetes.kubectl"
            echo ""
            
            echo "üìã ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö macOS:"
            echo "# ‡πÉ‡∏ä‡πâ Homebrew"
            echo "brew install kubectl"
            echo ""
            
            echo "üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á:"
            echo "kubectl version --client"
            echo ""
            ;;
        
        4)
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            echo "üîç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"
            echo "========================="
            
            log "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• cluster:"
            kubectl cluster-info
            echo ""
            
            log "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• context ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:"
            kubectl config get-contexts
            echo ""
            
            log "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• namespace:"
            kubectl get namespaces
            echo ""
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ArgoCD
            if kubectl get namespace argocd >/dev/null 2>&1; then
                log "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ArgoCD:"
                kubectl get pods -n argocd
                echo ""
                
                log "ArgoCD Service:"
                kubectl get svc -n argocd
                echo ""
            fi
            ;;
        
        5)
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á kubeconfig ‡πÅ‡∏ö‡∏ö portable
            echo "üîß ‡∏™‡∏£‡πâ‡∏≤‡∏á kubeconfig ‡πÅ‡∏ö‡∏ö portable"
            echo "============================="
            
            # ‡∏Ç‡∏≠ IP address ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ
            read -p "‡∏õ‡πâ‡∏≠‡∏ô IP address ‡∏Ç‡∏≠‡∏á Master Node ‡∏ó‡∏µ‡πà client ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ [$MASTER_IP]: " custom_ip
            CUSTOM_IP=${custom_ip:-$MASTER_IP}
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå kubeconfig ‡πÅ‡∏ö‡∏ö portable
            PORTABLE_KUBECONFIG="kubeconfig-portable-$(date +%Y%m%d).yaml"
            
            log "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå kubeconfig ‡πÅ‡∏ö‡∏ö portable..."
            kubectl config view --raw > "$PORTABLE_KUBECONFIG.tmp"
            
            # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà server URL ‡∏î‡πâ‡∏ß‡∏¢ IP ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
            API_PORT=$(echo "$SERVER_URL" | grep -oE ':[0-9]+$' || echo ":6443")
            sed "s|server:.*|server: https://$CUSTOM_IP$API_PORT|g" "$PORTABLE_KUBECONFIG.tmp" > "$PORTABLE_KUBECONFIG"
            rm "$PORTABLE_KUBECONFIG.tmp"
            
            if [ -f "$PORTABLE_KUBECONFIG" ]; then
                log "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå kubeconfig ‡πÅ‡∏ö‡∏ö portable ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: $PORTABLE_KUBECONFIG"
                log "‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå: $(du -h "$PORTABLE_KUBECONFIG" | cut -f1)"
                
                echo ""
                log "‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏ô client:"
                echo "1. ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå $PORTABLE_KUBECONFIG ‡πÑ‡∏õ‡∏¢‡∏±‡∏á client"
                echo "2. ‡∏ö‡∏ô client ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ environment variable:"
                echo "   export KUBECONFIG=/path/to/$PORTABLE_KUBECONFIG"
                echo "3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: kubectl cluster-info"
                echo ""
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå
                echo "üìã ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å client (‡∏£‡∏±‡∏ô‡∏ö‡∏ô client):"
                echo "scp $(whoami)@$MASTER_IP:$(pwd)/$PORTABLE_KUBECONFIG ~/kubeconfig.yaml"
                echo ""
            else
                error "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå kubeconfig ‡πÅ‡∏ö‡∏ö portable ‡πÑ‡∏î‡πâ"
            fi
            ;;
        
        q|Q)
            log "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"
            exit 0
            ;;
        
        *)
            warn "‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà"
            ;;
    esac
    
    echo "----------------------------------------"
    echo ""
done
