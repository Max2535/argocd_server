#!/bin/bash
set -e

# ===============================
# Ubuntu Server 24.04 LTS + Kubernetes + ArgoCD Installation
# ===============================
echo "üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Kubernetes + ArgoCD ‡∏ö‡∏ô Ubuntu Server 24.04"
echo "üìÖ Date: $(date)"
echo "üñ•Ô∏è  OS: $(lsb_release -d | cut -f2)"

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô root ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ sudo
if [[ $EUID -eq 0 ]]; then
   echo "‚ùå ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢ root ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏ä‡πâ user ‡∏ó‡∏µ‡πà‡∏°‡∏µ sudo privileges"
   exit 1
fi

# ===============================
# 1. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies
# ===============================
echo "üì¶ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies..."
sudo apt update && sudo apt upgrade -y
sudo apt install -y apt-transport-https ca-certificates curl gnupg lsb-release software-properties-common

# ===============================
# 2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ system requirements ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Kubernetes
# ===============================
echo "‚öôÔ∏è  ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ system requirements..."

# ‡∏õ‡∏¥‡∏î Swap
sudo swapoff -a
sudo sed -i '/ swap / s/^/#/' /etc/fstab

# ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô kernel modules
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ sysctl parameters
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

sudo sysctl --system

# ===============================
# 3. ‡∏õ‡∏¥‡∏î Firewall (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏Å‡∏±‡∏î)
# ===============================
echo "üî• ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Firewall..."
sudo ufw disable || true

# ===============================
# 4. ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Containerd (Container Runtime)
# ===============================
echo "üì¶ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Containerd..."

# ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á containerd
sudo apt install -y containerd

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ containerd config
sudo mkdir -p /etc/containerd
containerd config default | sudo tee /etc/containerd/config.toml

# ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô SystemdCgroup (‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Kubernetes)
sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml

# restart ‡πÅ‡∏•‡∏∞ enable containerd
sudo systemctl restart containerd
sudo systemctl enable containerd

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ containerd
if ! sudo systemctl is-active --quiet containerd; then
    echo "‚ùå Containerd ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ"
    exit 1
fi
echo "‚úÖ Containerd ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"

# ===============================
# 5. ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á kubeadm, kubelet, kubectl
# ===============================
echo "‚ò∏Ô∏è  ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Kubernetes components..."

# ‡πÄ‡∏û‡∏¥‡πà‡∏° Kubernetes GPG key ‡πÅ‡∏•‡∏∞ repository
sudo mkdir -m 755 /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key |
    sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] \
https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /" |
    sudo tee /etc/apt/sources.list.d/kubernetes.list

sudo apt update
sudo apt install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

# ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô kubelet
sudo systemctl enable kubelet

echo "‚úÖ Kubernetes components ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"
echo "üìã ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô: $(kubeadm version -o short)"

# ===============================
# 6. Initial Control Plane (Master Node)
# ===============================
if [ "$1" == "master" ]; then
    echo "üéõÔ∏è  ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Control Plane (Master Node)..."
    
    # ‡∏î‡∏∂‡∏á IP address ‡∏Ç‡∏≠‡∏á server
    SERVER_IP=$(ip route get 8.8.8.8 | awk -F"src " 'NR==1{split($2,a," ");print a[1]}')
    echo "üåê Server IP: $SERVER_IP"
    
    # Initialize Kubernetes cluster
    sudo kubeadm init \
        --pod-network-cidr=10.244.0.0/16 \
        --apiserver-advertise-address=$SERVER_IP \
        --node-name=$(hostname)

    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ kubectl ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user
    mkdir -p $HOME/.kube
    sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
    sudo chown $(id -u):$(id -g) $HOME/.kube/config

    # ‡∏£‡∏≠‡πÉ‡∏´‡πâ API server ‡∏û‡∏£‡πâ‡∏≠‡∏°
    echo "‚è≥ ‡∏£‡∏≠‡πÉ‡∏´‡πâ Kubernetes API server ‡∏û‡∏£‡πâ‡∏≠‡∏°..."
    kubectl wait --for=condition=Ready nodes --all --timeout=300s

    # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Flannel CNI
    echo "üåê ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Flannel CNI Plugin..."
    kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml

    echo "‚úÖ Control Plane ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"
    echo "‚è≥ ‡∏£‡∏≠‡πÉ‡∏´‡πâ Cluster ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ArgoCD..."
    
    # ‡∏£‡∏≠‡πÉ‡∏´‡πâ Control Plane ‡πÅ‡∏•‡∏∞ CNI ‡∏û‡∏£‡πâ‡∏≠‡∏°
    sleep 30
    kubectl wait --for=condition=Ready nodes --all --timeout=300s
    
    # ===============================
    # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ArgoCD ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GitOps
    # ===============================
    echo "üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ArgoCD..."
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á namespace ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ArgoCD
    kubectl create namespace argocd
    
    # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ArgoCD (‡πÉ‡∏ä‡πâ stable version)
    kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
    
    # ‡∏£‡∏≠‡πÉ‡∏´‡πâ ArgoCD pods ‡∏û‡∏£‡πâ‡∏≠‡∏°
    echo "‚è≥ ‡∏£‡∏≠‡πÉ‡∏´‡πâ ArgoCD pods ‡∏û‡∏£‡πâ‡∏≠‡∏° (‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ 2-3 ‡∏ô‡∏≤‡∏ó‡∏µ)..."
    kubectl wait --for=condition=available --timeout=600s deployment/argocd-server -n argocd
    kubectl wait --for=condition=ready --timeout=600s pod -l app.kubernetes.io/name=argocd-server -n argocd
    
    # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ArgoCD service ‡πÄ‡∏õ‡πá‡∏ô NodePort ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å
    kubectl patch svc argocd-server -n argocd -p '{"spec":{"type":"NodePort","ports":[{"port":80,"nodePort":30080,"name":"http"},{"port":443,"nodePort":30443,"name":"https"}]}}'
    
    # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÉ‡∏´‡πâ service update
    sleep 10
    
    # ‡∏î‡∏∂‡∏á initial admin password
    echo "üîê ‡∏î‡∏∂‡∏á ArgoCD admin password..."
    ARGOCD_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    NODEPORT_HTTP=$(kubectl get svc argocd-server -n argocd -o jsonpath='{.spec.ports[?(@.name=="http")].nodePort}')
    NODEPORT_HTTPS=$(kubectl get svc argocd-server -n argocd -o jsonpath='{.spec.ports[?(@.name=="https")].nodePort}')
    NODE_IP=$(kubectl get nodes -o jsonpath='{.items[0].status.addresses[?(@.type=="InternalIP")].address}')
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
    cat > argocd-access-info.txt <<EOF
ArgoCD Access Information
========================
Generated: $(date)
Server IP: $NODE_IP

Web UI Access:
- HTTP:  http://$NODE_IP:$NODEPORT_HTTP
- HTTPS: https://$NODE_IP:$NODEPORT_HTTPS (self-signed cert)

Login Credentials:
- Username: admin
- Password: $ARGOCD_PASSWORD

ArgoCD CLI Commands:
# Install ArgoCD CLI
curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
rm argocd-linux-amd64

# Login with CLI
argocd login $NODE_IP:$NODEPORT_HTTPS --username admin --password $ARGOCD_PASSWORD --insecure

# Change admin password (recommended)
argocd account update-password --account admin --current-password $ARGOCD_PASSWORD

Kubernetes Cluster Info:
# Get join command for worker nodes
sudo kubeadm token create --print-join-command
EOF
    
    echo ""
    echo "üéâ ArgoCD ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!"
    echo "==============================================="
    echo "üåê ArgoCD Web UI:"
    echo "   HTTP:  http://$NODE_IP:$NODEPORT_HTTP"
    echo "   HTTPS: https://$NODE_IP:$NODEPORT_HTTPS"
    echo "üë§ Username: admin"
    echo "üîë Password: $ARGOCD_PASSWORD"
    echo "üìÑ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÉ‡∏ô: argocd-access-info.txt"
    echo "==============================================="
    echo ""
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö worker nodes
    echo "üìã ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏° Worker Nodes:"
    sudo kubeadm token create --print-join-command > worker-join-command.txt
    echo "   ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÉ‡∏ô: worker-join-command.txt"
    echo ""
fi

# ===============================
# 7. Worker Node Join
# ===============================
if [ "$1" == "worker" ]; then
    if [ -z "$2" ] || [ -z "$3" ] || [ -z "$4" ]; then
        echo "‚ùå ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô:"
        echo "   Usage: $0 worker <MASTER_IP:PORT> <TOKEN> <HASH>"
        echo "   Example: $0 worker 192.168.1.69:6443 3ahbh3.kydxy70vx4t4jv1v 0d72007ce0a0aff33388c965e1469e131df23150e71fc42a8a2ebf29cc30a87"
        exit 1
    fi
    
    echo "üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Worker Node ‡πÄ‡∏Ç‡πâ‡∏≤ Kubernetes Cluster..."
    echo "üì° Master: $2"
    echo "üé´ Token: $3"
    
    # Join cluster
    sudo kubeadm join $2 --token $3 --discovery-token-ca-cert-hash sha256:$4
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    if [ $? -eq 0 ]; then
        echo "‚úÖ Worker Node ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏° Cluster ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
        echo "üìã ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ö‡∏ô Master Node:"
        echo "   kubectl get nodes"
    else
        echo "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ join cluster"
        exit 1
    fi
fi

# ===============================
# GitOps Guide
# ===============================
if [ "$1" == "master" ]; then
    echo ""
    echo "üìö GitOps Quick Start Guide:"
    echo "==============================================="
    echo "1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Git Repository ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Kubernetes manifests"
    echo "2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Application ‡πÉ‡∏ô ArgoCD:"
    echo ""
    echo "   kubectl apply -f - <<EOF"
    echo "   apiVersion: argoproj.io/v1alpha1"
    echo "   kind: Application"
    echo "   metadata:"
    echo "     name: my-app"
    echo "     namespace: argocd"
    echo "   spec:"
    echo "     project: default"
    echo "     source:"
    echo "       repoURL: https://github.com/yourusername/your-k8s-manifests"
    echo "       targetRevision: HEAD"
    echo "       path: ."
    echo "     destination:"
    echo "       server: https://kubernetes.default.svc"
    echo "       namespace: default"
    echo "     syncPolicy:"
    echo "       automated:"
    echo "         prune: true"
    echo "         selfHeal: true"
    echo "   EOF"
    echo ""
    echo "3. ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ ArgoCD CLI:"
    echo "   argocd app create my-app \\"
    echo "     --repo https://github.com/yourusername/your-k8s-manifests \\"
    echo "     --path . \\"
    echo "     --dest-server https://kubernetes.default.svc \\"
    echo "     --dest-namespace default"
    echo ""
    echo "4. Sync Application:"
    echo "   argocd app sync my-app"
    echo "==============================================="
fi
