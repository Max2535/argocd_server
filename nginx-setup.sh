#!/bin/bash

echo "üåê ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Nginx Reverse Proxy ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ArgoCD"
echo "============================================="

# Check if running on Windows
is_windows() {
    [[ "$(uname -s)" == MINGW* ]] || [[ "$(uname -s)" == CYGWIN* ]] || [[ "$OS" == "Windows_NT" ]]
}

# Function to check if nginx is installed
check_nginx() {
    if command -v nginx &> /dev/null; then
        echo "‚úÖ nginx ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß"
        echo "   Version: $(nginx -v 2>&1)"
        return 0
    else
        echo "‚ùå nginx ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á"
        return 1
    fi
}

# Function to install nginx
install_nginx() {
    echo "üì¶ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á nginx..."
    
    if is_windows; then
        echo "ü™ü ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Windows:"
        echo "   ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡πÉ‡∏ä‡πâ Chocolatey"
        echo "   choco install nginx"
        echo ""
        echo "   ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å http://nginx.org/en/download.html"
        echo "   - ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î nginx ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Windows"
        echo "   - ‡πÅ‡∏ï‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏ó‡∏µ‡πà C:\\nginx"
        echo "   - ‡πÄ‡∏û‡∏¥‡πà‡∏° C:\\nginx ‡∏•‡∏á‡πÉ‡∏ô PATH"
        echo ""
        echo "   ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: ‡πÉ‡∏ä‡πâ Docker (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)"
        echo "   docker run -d --name nginx-argocd -p 80:80 -p 443:443 nginx"
        echo ""
        echo "üîÑ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏ú‡πà‡∏≤‡∏ô Docker ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/N)"
        read -r response
        if [[ "$response" =~ ^[Yy]$ ]]; then
            setup_nginx_docker
            return $?
        fi
    else
        # Linux installation
        if command -v apt-get &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y nginx
        elif command -v yum &> /dev/null; then
            sudo yum install -y nginx
        elif command -v pacman &> /dev/null; then
            sudo pacman -S nginx
        else
            echo "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á nginx ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á"
            return 1
        fi
    fi
}

# Function to create HTTP-only nginx config
create_http_nginx_config() {
    cat > nginx-config/conf.d/nginx-argocd.conf <<EOF
# Nginx configuration for ArgoCD reverse proxy (HTTP only)
server {
    listen 80;
    server_name localhost argocd.local;
    
    # ArgoCD specific headers
    proxy_set_header Host \$host;
    proxy_set_header X-Real-IP \$remote_addr;
    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto \$scheme;
    proxy_set_header X-Forwarded-Host \$host;
    proxy_set_header X-Forwarded-Server \$host;
    
    # Required for ArgoCD Server Sent Events (SSE)
    proxy_http_version 1.1;
    proxy_set_header Upgrade \$http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_buffering off;
    proxy_read_timeout 86400;
    
    # Increase body size for large Git repos
    client_max_body_size 0;
    
    # ArgoCD UI
    location / {
        proxy_pass https://127.0.0.1:8080;
        proxy_ssl_verify off;
    }
    
    # ArgoCD API
    location /api/ {
        proxy_pass https://127.0.0.1:8080/api/;
        proxy_ssl_verify off;
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}
EOF
}

# Function to setup nginx with Docker
setup_nginx_docker() {
    echo "üê≥ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Nginx ‡∏ú‡πà‡∏≤‡∏ô Docker..."
    
    # Check if Docker is running
    if ! docker info &> /dev/null; then
        echo "‚ùå Docker ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î Docker ‡∏Å‡πà‡∏≠‡∏ô"
        return 1
    fi
    
    # Create nginx directories
    mkdir -p nginx-config/ssl nginx-config/conf.d nginx-logs
    
    # Generate SSL certificates
    if generate_ssl_certs "nginx-config/ssl"; then
        # Use HTTPS config
        cp nginx-argocd.conf nginx-config/conf.d/
        USE_HTTPS=true
    else
        # Use HTTP-only config
        create_http_nginx_config
        USE_HTTPS=false
    fi
    
    # Create docker-compose.yml for nginx
    if [ "$USE_HTTPS" = true ]; then
        cat > docker-compose-nginx.yml <<EOF
services:
  nginx-argocd:
    image: nginx:alpine
    container_name: nginx-argocd
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-config/conf.d:/etc/nginx/conf.d
      - ./nginx-config/ssl:/etc/nginx/ssl
      - ./nginx-logs:/var/log/nginx
    restart: unless-stopped
    networks:
      - argocd-network

  kubectl-proxy:
    image: bitnami/kubectl:latest
    container_name: kubectl-proxy
    command: >
      sh -c "
        echo 'Setting up kubectl proxy...' &&
        kubectl port-forward svc/argocd-server -n argocd 8080:443 --address=0.0.0.0
      "
    volumes:
      - ~/.kube:/home/kubectl/.kube:ro
    network_mode: host
    restart: unless-stopped

networks:
  argocd-network:
    driver: bridge
EOF
    else
        cat > docker-compose-nginx.yml <<EOF
services:
  nginx-argocd:
    image: nginx:alpine
    container_name: nginx-argocd
    ports:
      - "80:80"
    volumes:
      - ./nginx-config/conf.d:/etc/nginx/conf.d
      - ./nginx-logs:/var/log/nginx
    restart: unless-stopped
    networks:
      - argocd-network

  kubectl-proxy:
    image: bitnami/kubectl:latest
    container_name: kubectl-proxy
    command: >
      sh -c "
        echo 'Setting up kubectl proxy...' &&
        kubectl port-forward svc/argocd-server -n argocd 8080:443 --address=0.0.0.0
      "
    volumes:
      - ~/.kube:/home/kubectl/.kube:ro
    network_mode: host
    restart: unless-stopped

networks:
  argocd-network:
    driver: bridge
EOF
    fi
    
    echo "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Docker Compose configuration ‡πÅ‡∏•‡πâ‡∏ß"
    
    # Start nginx
    echo "üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Nginx..."
    docker-compose -f docker-compose-nginx.yml up -d
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Nginx ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
        if [ "$USE_HTTPS" = true ]; then
            echo "üåê ArgoCD UI: https://localhost"
            echo "üåê ArgoCD UI (HTTP): http://localhost (‡∏à‡∏∞ redirect ‡πÑ‡∏õ HTTPS)"
        else
            echo "üåê ArgoCD UI: http://localhost"
        fi
        return 0
    else
        echo "‚ùå Nginx ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
        return 1
    fi
}

# Function to generate SSL certificates
generate_ssl_certs() {
    local ssl_dir=$1
    echo "üîê ‡∏™‡∏£‡πâ‡∏≤‡∏á SSL certificates..."
    
    # Create SSL directory
    mkdir -p "$ssl_dir"
    
    # Generate private key
    openssl genrsa -out "$ssl_dir/argocd.key" 2048 2>/dev/null
    
    # Generate certificate - fix the subject format for Windows
    if is_windows; then
        # For Windows, use quotes to handle the subject properly
        openssl req -new -x509 -key "$ssl_dir/argocd.key" -out "$ssl_dir/argocd.crt" -days 365 -subj "//C=TH\ST=Bangkok\L=Bangkok\O=ArgoCD\OU=Local\CN=localhost" 2>/dev/null
    else
        openssl req -new -x509 -key "$ssl_dir/argocd.key" -out "$ssl_dir/argocd.crt" -days 365 -subj "/C=TH/ST=Bangkok/L=Bangkok/O=ArgoCD/OU=Local/CN=localhost" 2>/dev/null
    fi
    
    if [ $? -eq 0 ] && [ -f "$ssl_dir/argocd.crt" ] && [ -f "$ssl_dir/argocd.key" ]; then
        echo "‚úÖ SSL certificates ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
    else
        echo "‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á SSL certificates ‡πÑ‡∏î‡πâ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ HTTP ‡πÅ‡∏ó‡∏ô"
        # Create a simple nginx config without SSL
        create_http_nginx_config
        return 1
    fi
}

# Function to setup nginx configuration
setup_nginx_config() {
    echo "‚öôÔ∏è  ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ nginx configuration..."
    
    if is_windows; then
        echo "üìã ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Windows ‡∏Å‡∏±‡∏ö nginx ‡πÅ‡∏ö‡∏ö native:"
        echo "   1. copy nginx-argocd.conf ‡πÑ‡∏õ‡∏ó‡∏µ‡πà nginx/conf/conf.d/"
        echo "   2. ‡∏™‡∏£‡πâ‡∏≤‡∏á SSL certificates"
        echo "   3. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç nginx.conf ‡πÉ‡∏´‡πâ include conf.d/*.conf"
        echo "   4. restart nginx"
        return 0
    fi
    
    # Linux setup
    local nginx_dir="/etc/nginx"
    local ssl_dir="/etc/nginx/ssl"
    
    # Create SSL directory
    sudo mkdir -p "$ssl_dir"
    
    # Generate SSL certificates
    generate_ssl_certs "$ssl_dir"
    
    # Copy nginx configuration
    sudo cp nginx-argocd.conf "$nginx_dir/sites-available/"
    
    # Enable site
    sudo ln -sf "$nginx_dir/sites-available/nginx-argocd.conf" "$nginx_dir/sites-enabled/"
    
    # Remove default site
    sudo rm -f "$nginx_dir/sites-enabled/default"
    
    # Test nginx configuration
    sudo nginx -t
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ nginx configuration ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
        return 0
    else
        echo "‚ùå nginx configuration ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤"
        return 1
    fi
}

# Function to start services
start_services() {
    echo "üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô services..."
    
    # Start kubectl port-forward in background
    echo "üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô kubectl port-forward..."
    kubectl port-forward svc/argocd-server -n argocd 8080:443 > /dev/null 2>&1 &
    local kubectl_pid=$!
    
    # Save PID for later cleanup
    echo $kubectl_pid > .kubectl-proxy.pid
    
    sleep 5
    
    # Test if port-forward is working
    if curl -k -s https://localhost:8080 > /dev/null; then
        echo "‚úÖ kubectl port-forward ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà"
    else
        echo "‚ùå kubectl port-forward ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
        return 1
    fi
    
    # Start nginx
    if is_windows; then
        echo "ü™ü ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô nginx ‡∏ö‡∏ô Windows..."
        # For Windows, we're using Docker approach
        return 0
    else
        echo "üêß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô nginx ‡∏ö‡∏ô Linux..."
        sudo systemctl start nginx
        sudo systemctl enable nginx
        
        if systemctl is-active --quiet nginx; then
            echo "‚úÖ nginx ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà"
            return 0
        else
            echo "‚ùå nginx ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
            return 1
        fi
    fi
}

# Function to stop services
stop_services() {
    echo "üõë ‡∏´‡∏¢‡∏∏‡∏î services..."
    
    # Stop nginx
    if is_windows; then
        if docker ps | grep -q nginx-argocd; then
            docker-compose -f docker-compose-nginx.yml down
            echo "‚úÖ ‡∏´‡∏¢‡∏∏‡∏î nginx container ‡πÅ‡∏•‡πâ‡∏ß"
        fi
    else
        sudo systemctl stop nginx
        echo "‚úÖ ‡∏´‡∏¢‡∏∏‡∏î nginx ‡πÅ‡∏•‡πâ‡∏ß"
    fi
    
    # Stop kubectl port-forward
    if [ -f .kubectl-proxy.pid ]; then
        local pid=$(cat .kubectl-proxy.pid)
        if kill -0 $pid 2>/dev/null; then
            kill $pid
            echo "‚úÖ ‡∏´‡∏¢‡∏∏‡∏î kubectl port-forward ‡πÅ‡∏•‡πâ‡∏ß"
        fi
        rm -f .kubectl-proxy.pid
    fi
}

# Function to show status
show_status() {
    echo "üìä Status:"
    echo "=========="
    
    # Check ArgoCD
    if kubectl get pods -n argocd | grep -q Running; then
        echo "‚úÖ ArgoCD: Running"
    else
        echo "‚ùå ArgoCD: Not Running"
    fi
    
    # Check kubectl port-forward
    if [ -f .kubectl-proxy.pid ]; then
        local pid=$(cat .kubectl-proxy.pid)
        if kill -0 $pid 2>/dev/null; then
            echo "‚úÖ kubectl port-forward: Running (PID: $pid)"
        else
            echo "‚ùå kubectl port-forward: Not Running"
        fi
    else
        echo "‚ùå kubectl port-forward: Not Running"
    fi
    
    # Check nginx
    if is_windows; then
        if docker ps | grep -q nginx-argocd; then
            echo "‚úÖ nginx: Running (Docker)"
            echo "üåê ArgoCD UI: https://localhost"
        else
            echo "‚ùå nginx: Not Running"
        fi
    else
        if systemctl is-active --quiet nginx; then
            echo "‚úÖ nginx: Running"
            echo "üåê ArgoCD UI: https://localhost"
        else
            echo "‚ùå nginx: Not Running"
        fi
    fi
}

# Function to show help
show_help() {
    echo "üìã Available commands:"
    echo "===================="
    echo "  start    - ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô nginx reverse proxy"
    echo "  stop     - ‡∏´‡∏¢‡∏∏‡∏î nginx ‡πÅ‡∏•‡∏∞ kubectl port-forward"
    echo "  restart  - restart services"
    echo "  status   - ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ services"
    echo "  logs     - ‡πÅ‡∏™‡∏î‡∏á nginx logs"
    echo "  help     - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ"
    echo ""
    echo "üìù Example:"
    echo "  ./nginx-setup.sh start"
    echo "  ./nginx-setup.sh status"
}

# Function to show logs
show_logs() {
    echo "üìú Nginx Logs:"
    echo "=============="
    
    if is_windows; then
        if docker ps | grep -q nginx-argocd; then
            echo "üê≥ Docker nginx logs:"
            docker logs nginx-argocd --tail=50 -f
        else
            echo "‚ùå nginx container ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
        fi
    else
        if [ -f /var/log/nginx/argocd.access.log ]; then
            echo "üìã Access logs:"
            tail -f /var/log/nginx/argocd.access.log
        else
            echo "‚ùå nginx log files ‡πÑ‡∏°‡πà‡∏û‡∏ö"
        fi
    fi
}

# Main execution
case "$1" in
    start)
        if ! check_nginx; then
            install_nginx
        fi
        setup_nginx_config
        start_services
        show_status
        ;;
    stop)
        stop_services
        ;;
    restart)
        stop_services
        sleep 2
        start_services
        show_status
        ;;
    status)
        show_status
        ;;
    logs)
        show_logs
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        echo "üåê Nginx Reverse Proxy Setup ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ArgoCD"
        echo "=========================================="
        echo ""
        show_help
        ;;
esac
