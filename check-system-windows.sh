#!/bin/bash

echo "üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Kubernetes + ArgoCD (Windows Version)"
echo "============================================================"

# Check OS Version
echo "üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö:"
if command -v lsb_release &> /dev/null; then
    echo "OS: $(lsb_release -d | cut -f2)"
else
    echo "OS: Windows (Git Bash)"
fi
echo "Kernel: $(uname -r)"
echo "Architecture: $(uname -m)"

# Check Resources
echo ""
echo "üíæ ‡∏ó‡∏£‡∏±‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏£‡∏∞‡∏ö‡∏ö:"

# Check RAM - use wmic on Windows or alternative methods
if command -v wmic &> /dev/null; then
    TOTAL_RAM_KB=$(wmic computersystem get TotalPhysicalMemory /value | grep -o '[0-9]*' | head -1)
    if [ ! -z "$TOTAL_RAM_KB" ]; then
        TOTAL_RAM_GB=$(awk "BEGIN {printf \"%.1f\", $TOTAL_RAM_KB/1024/1024/1024}")
        echo "RAM: ${TOTAL_RAM_GB}GB total"
    else
        echo "RAM: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ"
    fi
elif command -v free &> /dev/null; then
    echo "RAM: $(free -h | awk 'NR==2{printf "%.1f/%.1f GB (%.2f%%)\n", $3/1024/1024,$2/1024/1024,$3*100/$2 }')"
else
    echo "RAM: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ wmic ‡∏´‡∏£‡∏∑‡∏≠ free command)"
fi

echo "CPU: $(nproc) cores"
echo "Disk: $(df -h / | awk 'NR==2{print $4" available"}')"

# Check Network
echo ""
echo "üåê ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢:"
if ping -c 1 8.8.8.8 &> /dev/null || ping -n 1 8.8.8.8 &> /dev/null; then
    echo "‚úÖ Internet connection: OK"
else
    echo "‚ùå Internet connection: Failed"
fi

# Check if running as administrator (Windows equivalent of root)
echo ""
echo "üë§ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:"
echo "‚úÖ ‡∏£‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ user: $(whoami)"

# Check if running with administrator privileges
if net session &> /dev/null; then
    echo "‚úÖ ‡∏°‡∏µ Administrator privileges"
else
    echo "‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ Administrator privileges (‡∏≠‡∏≤‡∏à‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á)"
fi

# Check Docker
echo ""
echo "üì¶ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö software ‡∏ó‡∏µ‡πà‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß:"

if command -v docker &> /dev/null; then
    echo "‚ö†Ô∏è  Docker ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß"
    echo "   Version: $(docker --version)"
    if docker info &> /dev/null; then
        echo "   Status: Docker daemon ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
    else
        echo "   Status: Docker daemon ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
    fi
fi

if command -v kubectl &> /dev/null; then
    echo "‚úÖ kubectl ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß"
    KUBECTL_VERSION=$(kubectl version --client --short 2>/dev/null || kubectl version --client 2>/dev/null | head -1)
    echo "   Version: $KUBECTL_VERSION"
fi

if command -v minikube &> /dev/null; then
    echo "‚úÖ minikube ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß"
    echo "   Version: $(minikube version | head -1)"
fi

if command -v kind &> /dev/null; then
    echo "‚úÖ kind ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡πâ‡∏ß"
    echo "   Version: $(kind version)"
fi

# Check ports (use netstat instead of ss for Windows compatibility)
echo ""
echo "üîå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ports ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô:"
REQUIRED_PORTS="6443 2379 2380 10250 10259 10257"
for port in $REQUIRED_PORTS; do
    if netstat -an 2>/dev/null | grep -q ":$port "; then
        echo "‚ùå Port $port ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà"
    else
        echo "‚úÖ Port $port ‡∏ß‡πà‡∏≤‡∏á"
    fi
done

# Check minimum requirements
echo ""
echo "üìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥:"

# RAM check (minimum 4GB for Windows + Kubernetes)
if [ ! -z "$TOTAL_RAM_GB" ]; then
    RAM_CHECK=$TOTAL_RAM_GB
else
    # Fallback: assume we have enough RAM if we can't detect it
    RAM_CHECK=8.0
fi

if awk "BEGIN {exit !($RAM_CHECK >= 4)}"; then
    echo "‚úÖ RAM: ${RAM_CHECK}GB (‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 4GB ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Windows + Kubernetes)"
else
    echo "‚ùå RAM: ${RAM_CHECK}GB (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 4GB ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Windows + Kubernetes)"
fi

# CPU check (minimum 2 cores)
CPU_CORES=$(nproc)
if [ $CPU_CORES -ge 2 ]; then
    echo "‚úÖ CPU: ${CPU_CORES} cores (‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 2 cores)"
else
    echo "‚ùå CPU: ${CPU_CORES} cores (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 cores)"
fi

# Disk check (minimum 20GB available)
DISK_GB=$(df / | awk 'NR==2{printf "%.1f", $4/1024/1024}')
if awk "BEGIN {exit !($DISK_GB >= 20)}"; then
    echo "‚úÖ Disk: ${DISK_GB}GB available (‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 20GB)"
else
    echo "‚ùå Disk: ${DISK_GB}GB available (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 20GB)"
fi

echo ""
echo "============================================================"
echo "üéØ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:"

# Count issues
ISSUES=0

# Check internet connection
if ! (ping -c 1 8.8.8.8 &> /dev/null || ping -n 1 8.8.8.8 &> /dev/null); then
    echo "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Internet ‡πÑ‡∏î‡πâ"
    ISSUES=$((ISSUES+1))
fi

# Check RAM
if [ ! -z "$RAM_CHECK" ] && awk "BEGIN {exit !($RAM_CHECK < 4)}"; then
    echo "‚ùå RAM ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠"
    ISSUES=$((ISSUES+1))
fi

# Check CPU
if [ $CPU_CORES -lt 2 ]; then
    echo "‚ùå CPU cores ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠"
    ISSUES=$((ISSUES+1))
fi

# Check Disk
if awk "BEGIN {exit !($DISK_GB < 20)}"; then
    echo "‚ùå Disk space ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠"
    ISSUES=$((ISSUES+1))
fi

if [ $ISSUES -eq 0 ]; then
    echo "‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Kubernetes + ArgoCD"
    echo ""
    echo "üöÄ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Windows ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ:"
    echo "   - Docker Desktop with Kubernetes enabled"
    echo "   - minikube"
    echo "   - kind"
    echo ""
    echo "üí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á minikube:"
    echo "   1. ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á minikube: https://minikube.sigs.k8s.io/docs/start/"
    echo "   2. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô cluster: minikube start"
    echo "   3. ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ArgoCD: kubectl create namespace argocd && kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml"
else
    echo "‚ö†Ô∏è  ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤ $ISSUES ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á"
fi

echo "============================================================"
