#!/bin/bash

# =============================================================================
# üîÑ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Kubernetes Client ‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
# =============================================================================

# ‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() { echo -e "${GREEN}[INFO]${NC} $1"; }
warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; }
info() { echo -e "${BLUE}[INFO]${NC} $1"; }

echo "üîÑ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Kubernetes Client ‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"
echo "======================================"
echo ""

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö parameter
if [ $# -lt 1 ]; then
    warn "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏ü‡∏•‡πå kubeconfig ‡∏´‡∏£‡∏∑‡∏≠ IP ‡∏Ç‡∏≠‡∏á master node"
    echo ""
    echo "‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ:"
    echo "  $0 <path-to-kubeconfig>   # ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå kubeconfig ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"
    echo "  $0 <master-ip>            # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î kubeconfig ‡∏à‡∏≤‡∏Å master node"
    echo ""
    echo "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:"
    echo "  $0 kubeconfig.yaml"
    echo "  $0 192.168.1.100"
    exit 1
fi

INPUT=$1
KUBE_DIR="$HOME/.kube"

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á kubectl
install_kubectl() {
    local os_type=$(uname -s)
    local os_arch=$(uname -m)
    
    log "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á kubectl..."
    
    case "$os_type" in
        Linux)
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Ubuntu/Debian ‡∏´‡∏£‡∏∑‡∏≠ CentOS/RHEL
            if command -v apt-get >/dev/null 2>&1; then
                log "‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Debian/Ubuntu"
                
                sudo apt-get update
                sudo apt-get install -y apt-transport-https ca-certificates curl
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏° repository
                curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
                echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
                
                # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á kubectl
                sudo apt-get update
                sudo apt-get install -y kubectl
                
            elif command -v yum >/dev/null 2>&1; then
                log "‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏£‡∏∞‡∏ö‡∏ö CentOS/RHEL"
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏° repository
                cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/
enabled=1
gpgcheck=1
gpgkey=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key
EOF
                
                # ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á kubectl
                sudo yum install -y kubectl
                
            else
                warn "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏∞‡∏ö‡∏ö Linux ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ"
                warn "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á kubectl ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á: https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/"
                exit 1
            fi
            ;;
            
        Darwin)
            # macOS
            log "‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏£‡∏∞‡∏ö‡∏ö macOS"
            
            if command -v brew >/dev/null 2>&1; then
                brew install kubectl
            else
                warn "‡πÑ‡∏°‡πà‡∏û‡∏ö Homebrew"
                warn "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Homebrew ‡∏Å‡πà‡∏≠‡∏ô: https://brew.sh/"
                warn "‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á kubectl ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á: https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/"
                exit 1
            fi
            ;;
            
        MINGW*|MSYS*|CYGWIN*)
            # Windows
            log "‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Windows"
            warn "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á kubectl ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á:"
            echo "1. ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å: https://dl.k8s.io/release/v1.29.0/bin/windows/amd64/kubectl.exe"
            echo "2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ PATH"
            echo "‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ Chocolatey: choco install kubernetes-cli"
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ kubectl ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if command -v kubectl.exe >/dev/null 2>&1; then
                log "‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö kubectl ‡πÅ‡∏•‡πâ‡∏ß"
            else
                warn "‡πÑ‡∏°‡πà‡∏û‡∏ö kubectl ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠"
                exit 1
            fi
            ;;
            
        *)
            error "‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ: $os_type"
            exit 1
            ;;
    esac
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á
    if command -v kubectl >/dev/null 2>&1; then
        kubectl_version=$(kubectl version --client -o yaml | grep "gitVersion" | head -1 | cut -d: -f2 | tr -d ' "')
        log "‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á kubectl ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô $kubectl_version ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
        return 0
    else
        error "‚ùå ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á kubectl ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"
        exit 1
    fi
}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ kubeconfig
setup_kubeconfig() {
    local kubeconfig_path=$1
    
    log "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ kubeconfig..."
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πÄ‡∏£‡∏Å‡∏ó‡∏≠‡∏£‡∏µ .kube ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    mkdir -p "$KUBE_DIR"
    
    # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå kubeconfig
    cp "$kubeconfig_path" "$KUBE_DIR/config"
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
    chmod 600 "$KUBE_DIR/config"
    
    log "‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ kubeconfig ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    if kubectl cluster-info >/dev/null 2>&1; then
        log "‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Kubernetes cluster ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
        return 0
    else
        error "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Kubernetes cluster ‡πÑ‡∏î‡πâ"
        return 1
    fi
}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î kubeconfig ‡∏à‡∏≤‡∏Å master node
download_kubeconfig() {
    local master_ip=$1
    local user=$(whoami)
    local remote_user=""
    local remote_path=""
    
    log "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î kubeconfig ‡∏à‡∏≤‡∏Å master node: $master_ip"
    
    # ‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SSH
    read -p "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SSH [$user]: " input_user
    remote_user=${input_user:-$user}
    
    # ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö master node
    if ! ssh -o ConnectTimeout=5 -o BatchMode=yes -o StrictHostKeyChecking=accept-new "$remote_user@$master_ip" "echo 2>&1" >/dev/null; then
        warn "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö master node ‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢ SSH"
        warn "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á master ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢ SSH"
        exit 1
    fi
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ kubeconfig ‡∏ö‡∏ô master node
    possible_paths=(
        "/etc/kubernetes/admin.conf"
        "~/.kube/config"
        "~/kubeconfig.yaml"
        "~/kubeconfig-client-*.yaml"
    )
    
    for path in "${possible_paths[@]}"; do
        if ssh "$remote_user@$master_ip" "test -f $path" 2>/dev/null; then
            remote_path=$path
            log "‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå kubeconfig ‡∏ó‡∏µ‡πà: $remote_path"
            break
        fi
    done
    
    if [ -z "$remote_path" ]; then
        warn "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå kubeconfig ‡∏ö‡∏ô master node"
        read -p "‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå kubeconfig ‡∏ö‡∏ô master node: " remote_path
        
        if [ -z "$remote_path" ]; then
            error "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå kubeconfig"
            exit 1
        fi
    fi
    
    # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå kubeconfig
    local temp_kubeconfig="kubeconfig-$(date +%s).yaml"
    if scp "$remote_user@$master_ip:$remote_path" "$temp_kubeconfig"; then
        log "‚úÖ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î kubeconfig ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: $temp_kubeconfig"
        
        # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç server URL ‡πÉ‡∏ô kubeconfig (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
        local current_server=$(grep "server:" "$temp_kubeconfig" | head -1 | cut -d: -f2- | sed 's/^[ \t]*//')
        local current_ip=$(echo "$current_server" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+')
        
        if [[ "$current_ip" == "127.0.0.1" || "$current_ip" == "localhost" ]]; then
            log "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç server URL ‡∏à‡∏≤‡∏Å $current_ip ‡πÄ‡∏õ‡πá‡∏ô $master_ip"
            sed -i "s|server:.*|server: https://$master_ip:6443|g" "$temp_kubeconfig"
        fi
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ kubeconfig
        setup_kubeconfig "$temp_kubeconfig"
        
        # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        rm "$temp_kubeconfig"
        
        return 0
    else
        error "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î kubeconfig ‡πÑ‡∏î‡πâ"
        exit 1
    fi
}

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ArgoCD port forwarding
setup_argocd_port_forward() {
    log "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ArgoCD..."
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ namespace argocd ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if ! kubectl get namespace argocd >/dev/null 2>&1; then
        warn "‡πÑ‡∏°‡πà‡∏û‡∏ö namespace argocd"
        warn "‡∏≠‡∏≤‡∏à‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ArgoCD ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ namespace ‡∏≠‡∏∑‡πà‡∏ô"
        return 1
    fi
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ argocd-server ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if ! kubectl get pods -n argocd -l app.kubernetes.io/name=argocd-server -o jsonpath='{.items[0].status.phase}' | grep -q "Running"; then
        warn "Pod argocd-server ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
        return 1
    fi
    
    log "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ port forwarding ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ArgoCD..."
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ port forwarding ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if pgrep -f "kubectl.*port-forward.*argocd-server" >/dev/null; then
        log "‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ port-forward ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ArgoCD ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"
        return 0
    fi
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå start-argocd-port-forward.sh
    cat > start-argocd-port-forward.sh << 'EOF'
#!/bin/bash
echo "üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î port forwarding ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ArgoCD..."
kubectl port-forward svc/argocd-server -n argocd 8080:443 --address 0.0.0.0 &
echo "‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ArgoCD ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà: https://localhost:8080"
echo "üë§ Username: admin"
echo "üîë Password: ‡∏î‡∏π‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á kubectl -n argocd get secret argocd-initial-admin-password -o jsonpath=\"{.data.password}\" | base64 -d"
echo ""
echo "‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î port forwarding"
wait
EOF
    
    chmod +x start-argocd-port-forward.sh
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå get-argocd-password.sh
    cat > get-argocd-password.sh << 'EOF'
#!/bin/bash
echo "üîë ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô ArgoCD admin..."
PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-password -o jsonpath="{.data.password}" 2>/dev/null | base64 -d)

if [ -n "$PASSWORD" ]; then
    echo "‚úÖ ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô ArgoCD:"
    echo "üë§ Username: admin"
    echo "üîë Password: $PASSWORD"
else
    echo "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô ArgoCD"
    echo "‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å:"
    echo "1. ArgoCD ‡∏ñ‡∏π‡∏Å‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏°‡∏≤‡∏ô‡∏≤‡∏ô‡πÅ‡∏•‡∏∞ secret ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß"
    echo "2. ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß"
fi
EOF
    
    chmod +x get-argocd-password.sh
    
    log "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå start-argocd-port-forward.sh ‡πÅ‡∏•‡∏∞ get-argocd-password.sh ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
    log "‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ./start-argocd-port-forward.sh ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ArgoCD"
    
    return 0
}

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å
# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ kubectl ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if ! command -v kubectl >/dev/null 2>&1; then
    log "‡πÑ‡∏°‡πà‡∏û‡∏ö kubectl ‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"
    install_kubectl
else
    log "‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö kubectl ‡πÅ‡∏•‡πâ‡∏ß"
    kubectl_version=$(kubectl version --client -o yaml | grep "gitVersion" | head -1 | cut -d: -f2 | tr -d ' "')
    log "kubectl ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô: $kubectl_version"
fi

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ parameter ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå kubeconfig ‡∏´‡∏£‡∏∑‡∏≠ IP
if [ -f "$INPUT" ]; then
    # ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå kubeconfig
    log "‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå $INPUT"
    setup_kubeconfig "$INPUT"
else
    # ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô IP
    if [[ "$INPUT" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        download_kubeconfig "$INPUT"
    else
        error "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå $INPUT ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö IP address"
        exit 1
    fi
fi

# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• cluster
log "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Kubernetes cluster:"
kubectl cluster-info

echo ""
log "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ nodes ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö:"
kubectl get nodes -o wide

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ArgoCD port forwarding
echo ""
setup_argocd_port_forward

# ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
echo ""
log "‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Kubernetes client ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå"
echo ""
log "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:"
echo "  kubectl get nodes             - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ nodes"
echo "  kubectl get pods --all-namespaces - ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ pods ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
echo "  ./start-argocd-port-forward.sh - ‡πÄ‡∏õ‡∏¥‡∏î port forwarding ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ArgoCD"
echo "  ./get-argocd-password.sh      - ‡∏î‡∏π‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô ArgoCD admin"
echo ""
log "‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ArgoCD ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà: https://localhost:8080"
echo "üë§ Username: admin"
echo "üîë Password: ‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ./get-argocd-password.sh"
