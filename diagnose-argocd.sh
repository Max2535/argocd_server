#!/bin/bash

# =============================================================================
# üîç ‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ArgoCD
# =============================================================================

# ‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

log() { echo -e "${GREEN}[INFO]${NC} $1"; }
warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; }
info() { echo -e "${BLUE}[INFO]${NC} $1"; }
header() { echo -e "\n${CYAN}[${1}]${NC} ${2}"; }

echo "üîç ‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ArgoCD"
echo "======================"

# 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£
header "1" "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£"
os_name=$(uname -s)
os_version=$(uname -r)
echo "‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£: $os_name $os_version"

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Linux Distribution
if [ "$os_name" = "Linux" ]; then
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        echo "Linux Distribution: $NAME $VERSION_ID"
    fi
fi

# 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Kubernetes
header "2" "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Kubernetes"
if command -v kubectl >/dev/null 2>&1; then
    echo "kubectl: ‚úÖ ‡∏û‡∏ö"
    kubectl_version=$(kubectl version --client --short 2>/dev/null)
    echo "kubectl version: $kubectl_version"
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö cluster
    if kubectl cluster-info >/dev/null 2>&1; then
        echo "Kubernetes Cluster: ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ"
        echo "Context: $(kubectl config current-context)"
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö namespace argocd
        if kubectl get namespace argocd >/dev/null 2>&1; then
            echo "Namespace argocd: ‚úÖ ‡∏û‡∏ö"
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö pods
            echo -e "\nArgoCD Pods:"
            kubectl get pods -n argocd
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö services
            echo -e "\nArgoCD Services:"
            kubectl get svc -n argocd
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö svc/argocd-server
            server_svc=$(kubectl get svc argocd-server -n argocd -o jsonpath='{.spec.ports[?(@.name=="https")].port}' 2>/dev/null)
            if [ -n "$server_svc" ]; then
                echo -e "\nsvc/argocd-server port: $server_svc (HTTPS)"
            else
                echo -e "\nsvc/argocd-server: ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏û‡∏≠‡∏£‡πå‡∏ï HTTPS"
            fi
        else
            error "Namespace argocd: ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö"
        fi
    else
        error "Kubernetes Cluster: ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ"
    fi
else
    error "kubectl: ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö"
fi

# 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö port forwarding
header "3" "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Port Forwarding"
if pgrep -f "kubectl.*port-forward.*argocd-server" >/dev/null; then
    echo "Port Forwarding: ‚úÖ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
    echo -e "\nPort Forwarding Processes:"
    ps aux | grep "kubectl.*port-forward.*argocd-server" | grep -v grep
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö port ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î
    echo -e "\nPorts ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î:"
    netstat -tuln | grep -E ':(8080|8081|8443)' | grep LISTEN
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
    for port in 8080 8081 8443; do
        if netstat -tuln | grep -q ":$port "; then
            echo -e "\n‡∏ó‡∏î‡∏™‡∏≠‡∏ö port $port:"
            curl -k -I https://localhost:$port/ >/dev/null 2>&1
            if [ $? -eq 0 ]; then
                echo "https://localhost:$port: ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ"
            else
                echo "https://localhost:$port: ‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ"
            fi
        fi
    done
else
    warn "Port Forwarding: ‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
fi

# 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Docker
header "4" "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Docker"
if command -v docker >/dev/null 2>&1; then
    echo "Docker: ‚úÖ ‡∏û‡∏ö"
    docker_version=$(docker --version)
    echo "Docker Version: $docker_version"
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Docker Compose
    if command -v docker-compose >/dev/null 2>&1; then
        echo "Docker Compose (v1): ‚úÖ ‡∏û‡∏ö"
        dc_version=$(docker-compose --version)
        echo "Docker Compose Version: $dc_version"
    elif docker compose version >/dev/null 2>&1; then
        echo "Docker Compose (v2): ‚úÖ ‡∏û‡∏ö"
        dc_version=$(docker compose version)
        echo "Docker Compose Version: $dc_version"
    else
        warn "Docker Compose: ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö"
    fi
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö nginx container
    echo -e "\nNginx Containers:"
    docker ps --filter "name=nginx" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö log ‡∏Ç‡∏≠‡∏á nginx container
    nginx_container=$(docker ps --filter "name=nginx-argocd" --format "{{.Names}}" | head -1)
    if [ -n "$nginx_container" ]; then
        echo -e "\nNginx Container Log (‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ 10 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î):"
        docker logs $nginx_container --tail 10
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö nginx health check
        echo -e "\n‡∏ó‡∏î‡∏™‡∏≠‡∏ö Nginx Health Check:"
        curl -s http://localhost/nginx-status >/dev/null 2>&1
        if [ $? -eq 0 ]; then
            echo "http://localhost/nginx-status: ‚úÖ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥"
            echo "Response: $(curl -s http://localhost/nginx-status)"
        else
            error "http://localhost/nginx-status: ‚ùå ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
        fi
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ArgoCD UI
        echo -e "\n‡∏ó‡∏î‡∏™‡∏≠‡∏ö ArgoCD UI:"
        curl -I http://localhost/ >/dev/null 2>&1
        if [ $? -eq 0 ]; then
            echo "http://localhost/: ‚úÖ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥"
            echo "Status: $(curl -s -I http://localhost/ | head -1)"
        else
            error "http://localhost/: ‚ùå ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
        fi
    else
        warn "Nginx Container: ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö"
    fi
else
    error "Docker: ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö"
fi

# 5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå config
header "5" "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå Config"
if [ -d "nginx-simple" ]; then
    echo "Nginx Config Directory: ‚úÖ ‡∏û‡∏ö"
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå config
    if [ -f "nginx-simple/default.conf" ]; then
        echo "Nginx Config File: ‚úÖ ‡∏û‡∏ö (default.conf)"
        echo -e "\nNginx Config Summary:"
        grep -n "upstream\|server.*8080\|proxy_pass" nginx-simple/default.conf | head -5
    elif [ -f "nginx-simple/nginx-linux.conf" ]; then
        echo "Nginx Config File: ‚úÖ ‡∏û‡∏ö (nginx-linux.conf)"
        echo -e "\nNginx Config Summary:"
        grep -n "upstream\|server.*8080\|proxy_pass" nginx-simple/nginx-linux.conf | head -5
    else
        warn "Nginx Config File: ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö"
    fi
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå docker-compose
    if [ -f "docker-compose-linux-nginx.yml" ]; then
        echo -e "\nDocker Compose File: ‚úÖ ‡∏û‡∏ö (docker-compose-linux-nginx.yml)"
        echo "Network Mode: $(grep -o "network_mode:.*" docker-compose-linux-nginx.yml)"
    elif [ -f "docker-compose-nginx.yml" ]; then
        echo -e "\nDocker Compose File: ‚úÖ ‡∏û‡∏ö (docker-compose-nginx.yml)"
        echo "Network Mode: $(grep -o "network_mode:.*" docker-compose-nginx.yml 2>/dev/null || echo "standard (bridge)")"
    elif [ -f "docker-compose-simple.yml" ]; then
        echo -e "\nDocker Compose File: ‚úÖ ‡∏û‡∏ö (docker-compose-simple.yml)"
        echo "Network Mode: $(grep -o "network_mode:.*" docker-compose-simple.yml 2>/dev/null || echo "standard (bridge)")"
    else
        warn "Docker Compose File: ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö"
    fi
else
    warn "Nginx Config Directory: ‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö"
fi

# 6. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢
header "6" "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢"
echo "Network Interfaces:"
ip addr show | grep -E 'inet.*global' || ifconfig | grep -E 'inet '

echo -e "\nOpen Ports (LISTEN):"
netstat -tuln | grep LISTEN | head -10

echo -e "\nHost IP Address: $(hostname -I | awk '{print $1}')"

# 7. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö systemd services (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
header "7" "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Systemd Services"
if command -v systemctl >/dev/null 2>&1; then
    echo "Systemd: ‚úÖ ‡∏û‡∏ö"
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö argocd services
    if systemctl list-unit-files | grep -q argocd; then
        echo -e "\nArgoCD Services:"
        systemctl list-unit-files | grep argocd
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ services
        for service in argocd-http.service argocd-nginx.service; do
            if systemctl list-unit-files | grep -q $service; then
                echo -e "\n‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ $service:"
                systemctl status $service --no-pager | head -5
                
                if systemctl is-active $service >/dev/null 2>&1; then
                    echo "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚úÖ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà"
                else
                    warn "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‚ùå ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
                fi
            fi
        done
    else
        info "ArgoCD Systemd Services: ‡πÑ‡∏°‡πà‡∏û‡∏ö (‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô service)"
    fi
else
    info "Systemd: ‡πÑ‡∏°‡πà‡∏û‡∏ö (‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ systemd)"
fi

# 8. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
header "8" "‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"

# ‡πÄ‡∏ä‡πá‡∏Ñ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
problems=0

# ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Kubernetes
if ! kubectl get namespace argocd >/dev/null 2>&1; then
    error "‡∏õ‡∏±‡∏ç‡∏´‡∏≤: ‡πÑ‡∏°‡πà‡∏û‡∏ö namespace argocd"
    echo "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ArgoCD ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏±‡∏ô ./install-argocd.sh"
    problems=$((problems + 1))
fi

# ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Port Forwarding
if ! pgrep -f "kubectl.*port-forward.*argocd-server" >/dev/null; then
    error "‡∏õ‡∏±‡∏ç‡∏´‡∏≤: Port Forwarding ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
    echo "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏£‡∏±‡∏ô kubectl port-forward svc/argocd-server -n argocd 8080:443 --address 0.0.0.0 &"
    problems=$((problems + 1))
fi

# ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Nginx
nginx_container=$(docker ps --filter "name=nginx-argocd" --format "{{.Names}}" | head -1)
if [ -z "$nginx_container" ]; then
    error "‡∏õ‡∏±‡∏ç‡∏´‡∏≤: ‡πÑ‡∏°‡πà‡∏û‡∏ö Nginx container"
    echo "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏£‡∏±‡∏ô ./fix-linux-nginx.sh ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏° Nginx container"
    problems=$((problems + 1))
else
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö nginx health check
    if ! curl -s http://localhost/nginx-status >/dev/null 2>&1; then
        error "‡∏õ‡∏±‡∏ç‡∏´‡∏≤: Nginx health check ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
        echo "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö log ‡∏Ç‡∏≠‡∏á Nginx: docker logs $nginx_container"
        problems=$((problems + 1))
    fi
fi

# ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Config
if [ ! -f "nginx-simple/default.conf" ] && [ ! -f "nginx-simple/nginx-linux.conf" ]; then
    error "‡∏õ‡∏±‡∏ç‡∏´‡∏≤: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå config ‡∏Ç‡∏≠‡∏á Nginx"
    echo "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏£‡∏±‡∏ô ./fix-linux-nginx.sh ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå config"
    problems=$((problems + 1))
fi

# ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
if [ $problems -eq 0 ]; then
    echo -e "${GREEN}‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á${NC}"
    echo "‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:"
    echo "1. ‡πÑ‡∏ü‡∏£‡πå‡∏ß‡∏≠‡∏•‡∏•‡πå - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏û‡∏≠‡∏£‡πå‡∏ï 80 ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"
    echo "2. Network Mode - ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ host network mode"
    echo "3. ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á - ‡∏£‡∏±‡∏ô ./argocd-direct-https.sh"
else
    echo -e "${RED}‚ùå ‡∏û‡∏ö $problems ‡∏õ‡∏±‡∏ç‡∏´‡∏≤${NC}"
    echo "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:"
    echo "1. ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ú‡πà‡∏≤‡∏ô HTTP (port 80): ./fix-linux-nginx.sh"
    echo "2. ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ú‡πà‡∏≤‡∏ô HTTPS ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á: ./argocd-direct-https.sh"
    echo "3. ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô service: sudo ./install-argocd-service.sh"
fi

echo -e "\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!"
